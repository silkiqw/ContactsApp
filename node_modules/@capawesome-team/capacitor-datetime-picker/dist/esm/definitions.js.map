{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC;AAyJxC,MAAM,CAAN,IAAY,SAaX;AAbD,WAAY,SAAS;IACnB;;;;OAIG;IACH,kCAAqB,CAAA;IACrB;;;;OAIG;IACH,oCAAuB,CAAA;AACzB,CAAC,EAbW,SAAS,KAAT,SAAS,QAapB","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * These configuration values are available:\n     */\n    DatetimePicker?: {\n      /**\n       * Choose the theme that the datetime picker should have.\n       * With `auto` the system theme is used.\n       *\n       * Only available on Android and iOS.\n       *\n       * @since 0.0.1\n       * @default 'auto'\n       */\n      theme?: 'auto' | 'light' | 'dark';\n      /**\n       * Whether to use the spinner or clock mode for the time picker on Android.\n       *\n       * Only available on Android.\n       *\n       * @since 5.1.0\n       * @default 'clock'\n       */\n      androidTimePickerMode?: 'clock' | 'spinner';\n      /**\n       * Whether to use the calendar or spinner mode for the date picker on Android.\n       *\n       * Only available on Android.\n       *\n       * @since 5.1.0\n       * @default 'calendar'\n       */\n      androidDatePickerMode?: 'calendar' | 'spinner';\n    };\n  }\n}\n\nexport interface DatetimePickerPlugin {\n  /**\n   * Open the datetime picker.\n   *\n   * An error is thrown if the input is canceled or dismissed by the user.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 0.0.1\n   */\n  present(options?: PresentOptions): Promise<PresentResult>;\n}\n\nexport interface PresentOptions {\n  /**\n   * The cancel button text.\n   *\n   * @since 0.0.1\n   * @default 'Cancel'\n   */\n  cancelButtonText?: string;\n  /**\n   * The done button text.\n   *\n   * @since 0.0.1\n   * @default 'Ok'\n   */\n  doneButtonText?: string;\n  /**\n   * The format in which values are received and returned.\n   *\n   * @since 0.0.1\n   * @default 'yyyy-MM-dd'T'HH:mm:ss.sss'Z''\n   */\n  format?: string;\n  /**\n   * BCP 47 language tag to define the language of the UI.\n   *\n   * @since 0.0.2\n   * @example 'en-US'\n   */\n  locale?: string;\n  /**\n   * The latest date and time to accept.\n   * The format of this value must match the value of the `format` parameter.\n   * This value must specify a date string later than or equal to the one specified by the `min` attribute.\n   *\n   * @since 0.0.1\n   */\n  max?: string;\n  /**\n   * The earliest date and time to accept.\n   * The format of this value must match the value of the `format` parameter.\n   * This value must specify a date string earlier than or equal to the one specified by the `max` attribute.\n   *\n   * @since 0.0.1\n   */\n  min?: string;\n  /**\n   * Whether you want a date or time or datetime picker.\n   *\n   * @since 0.0.1\n   * @default 'datetime'\n   */\n  mode?: 'date' | 'time' | 'datetime';\n  /**\n   * Choose the theme that the datetime picker should have.\n   * With `auto` the system theme is used.\n   * This value overwrites the `theme` configuration value.\n   *\n   * Only available on Android and iOS.\n   * Spinner options only available on Android\n   *\n   * @since 0.0.1\n   */\n  theme?: 'auto' | 'light' | 'dark';\n  /**\n   * The predefined value when opening the picker.\n   * The format of this value must match the value of the `format` parameter.\n   *\n   * @since 0.0.1\n   */\n  value?: string;\n  /**\n   * Whether to use the spinner or clock mode for the time picker on Android.\n   * This value overwrites the `androidTimePickerMode` configuration value.\n   *\n   * Only available on Android.\n   *\n   * @since 5.1.0\n   */\n  androidTimePickerMode?: 'clock' | 'spinner';\n  /**\n   * Whether to use the calendar or spinner mode for the date picker on Android.\n   * This value overwrites the `androidDatePickerMode` configuration value.\n   *\n   * Only available on Android.\n   *\n   * @since 5.1.0\n   */\n  androidDatePickerMode?: 'calendar' | 'spinner';\n}\n\nexport interface PresentResult {\n  /**\n   * The value entered by the user.\n   * The format of this value matches the value of the `format` parameter.\n   *\n   * @since 0.0.1\n   */\n  value: string;\n}\n\nexport enum ErrorCode {\n  /**\n   * The picker was canceled by the user.\n   *\n   * @since 0.2.0\n   */\n  canceled = 'canceled',\n  /**\n   * The picker was dismissed by the user.\n   *\n   * @since 0.2.0\n   */\n  dismissed = 'dismissed',\n}\n"]}