var capacitorContacts = (function (exports, core) {
    'use strict';

    /**
     * @since 7.0.0
     */
    exports.EmailAddressType = void 0;
    (function (EmailAddressType) {
        /**
         * @since 7.0.0
         */
        EmailAddressType["Custom"] = "CUSTOM";
        /**
         * @since 7.0.0
         */
        EmailAddressType["Home"] = "HOME";
        /**
         * Only available on iOS.
         *
         * @since 7.0.0
         */
        EmailAddressType["ICloud"] = "ICLOUD";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        EmailAddressType["Mobile"] = "MOBILE";
        /**
         * @since 7.0.0
         */
        EmailAddressType["Other"] = "OTHER";
        /**
         * Only available on iOS.
         *
         * @since 7.0.0
         */
        EmailAddressType["School"] = "SCHOOL";
        /**
         * @since 7.0.0
         */
        EmailAddressType["Work"] = "WORK";
    })(exports.EmailAddressType || (exports.EmailAddressType = {}));
    /**
     * @since 7.0.0
     */
    exports.PhoneNumberType = void 0;
    (function (PhoneNumberType) {
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["Assistant"] = "ASSISTANT";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["Callback"] = "CALLBACK";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["Car"] = "CAR";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["CompanyMain"] = "COMPANY_MAIN";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["Custom"] = "CUSTOM";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["FaxHome"] = "FAX_HOME";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["FaxOther"] = "FAX_OTHER";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["FaxWork"] = "FAX_WORK";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["Home"] = "HOME";
        /**
         * Only available on iOS.
         *
         * @since 7.0.0
         */
        PhoneNumberType["IPhone"] = "IPHONE";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["Isdn"] = "ISDN";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["Main"] = "MAIN";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["Mms"] = "MMS";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["Mobile"] = "MOBILE";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["Other"] = "OTHER";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["Pager"] = "PAGER";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["Radio"] = "RADIO";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["Telex"] = "TELEX";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["TtyTdd"] = "TTY_TDD";
        /**
         * @since 7.0.0
         */
        PhoneNumberType["Work"] = "WORK";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["WorkMobile"] = "WORK_MOBILE";
        /**
         * Only available on Android.
         *
         * @since 7.0.0
         */
        PhoneNumberType["WorkPager"] = "WORK_PAGER";
    })(exports.PhoneNumberType || (exports.PhoneNumberType = {}));
    /**
     * @since 7.0.0
     */
    exports.PostalAddressType = void 0;
    (function (PostalAddressType) {
        /**
         * @since 7.0.0
         */
        PostalAddressType["Custom"] = "CUSTOM";
        /**
         * @since 7.0.0
         */
        PostalAddressType["Home"] = "HOME";
        /**
         * @since 7.0.0
         */
        PostalAddressType["Other"] = "OTHER";
        /**
         * @since 7.0.0
         */
        PostalAddressType["Work"] = "WORK";
    })(exports.PostalAddressType || (exports.PostalAddressType = {}));
    exports.UrlAddressType = void 0;
    (function (UrlAddressType) {
        /**
         * Only available on Android.
         *
         * @since 7.5.0
         */
        UrlAddressType["Blog"] = "BLOG";
        /**
         * @since 7.5.0
         */
        UrlAddressType["Custom"] = "CUSTOM";
        /**
         * Only available on Android.
         *
         * @since 7.5.0
         */
        UrlAddressType["Ftp"] = "FTP";
        /**
         * @since 7.5.0
         */
        UrlAddressType["Home"] = "HOME";
        /**
         * @since 7.5.0
         */
        UrlAddressType["Homepage"] = "HOMEPAGE";
        /**
         * @since 7.5.0
         */
        UrlAddressType["Other"] = "OTHER";
        /**
         * Only available on Android.
         *
         * @since 7.5.0
         */
        UrlAddressType["Profile"] = "PROFILE";
        /**
         * Only available on iOS.
         *
         * @since 7.5.0
         */
        UrlAddressType["School"] = "SCHOOL";
        /**
         * @since 7.5.0
         */
        UrlAddressType["Work"] = "WORK";
    })(exports.UrlAddressType || (exports.UrlAddressType = {}));

    const Contacts = core.registerPlugin('Contacts', {
        web: () => Promise.resolve().then(function () { return web; }).then(m => new m.ContactsWeb()),
    });

    class ContactsWeb extends core.WebPlugin {
        constructor() {
            super(...arguments);
            this._isSupported = 'contacts' in navigator;
        }
        async countContacts() {
            throw this.createUnimplementedException();
        }
        async createContact(_options) {
            throw this.createUnimplementedException();
        }
        async createGroup(_options) {
            throw this.createUnimplementedException();
        }
        async deleteContactById() {
            throw this.createUnimplementedException();
        }
        async deleteGroupById(_options) {
            throw this.createUnimplementedException();
        }
        async displayContactById(_options) {
            throw this.createUnimplementedException();
        }
        async displayUpdateContactById(_options) {
            throw this.createUnimplementedException();
        }
        async getAccounts() {
            throw this.createUnimplementedException();
        }
        async getContactById(_options) {
            throw this.createUnimplementedException();
        }
        async getGroupById(_options) {
            throw this.createUnimplementedException();
        }
        async getGroups() {
            throw this.createUnimplementedException();
        }
        async isAvailable() {
            return { isAvailable: this._isSupported };
        }
        async isSupported() {
            return { isSupported: this._isSupported };
        }
        async getContacts(_options) {
            throw this.createUnimplementedException();
        }
        async pickContact(options) {
            return this.pickContacts(options);
        }
        async pickContacts(options) {
            var _a;
            if (!this._isSupported) {
                throw this.createUnavailableException();
            }
            const contacts = (await navigator.contacts.select(['address', 'email', 'icon', 'name', 'tel'], { multiple: (_a = options === null || options === undefined ? undefined : options.multiple) !== null && _a !== undefined ? _a : false }));
            return {
                contacts: contacts.map(contact => {
                    var _a, _b, _c, _d;
                    return ({
                        emailAddresses: (_a = contact.email) === null || _a === undefined ? undefined : _a.map(email => ({
                            value: email,
                        })),
                        phoneNumbers: (_b = contact.tel) === null || _b === undefined ? undefined : _b.map(tel => ({
                            value: tel,
                        })),
                        postalAddresses: (_c = contact.address) === null || _c === undefined ? undefined : _c.map(address => {
                            const postalAddress = {};
                            if (address.city) {
                                postalAddress.city = address.city;
                            }
                            if (address.country) {
                                postalAddress.country = address.country;
                            }
                            if (address.addressLine) {
                                postalAddress.formatted = address.addressLine.join(', ');
                            }
                            if (address.region) {
                                postalAddress.state = address.region;
                            }
                            return postalAddress;
                        }),
                        fullName: (_d = contact.name) === null || _d === undefined ? undefined : _d.join(' '),
                    });
                }),
            };
        }
        checkPermissions() {
            throw this.createUnimplementedException();
        }
        requestPermissions() {
            throw this.createUnimplementedException();
        }
        displayCreateContact(_options) {
            throw this.createUnimplementedException();
        }
        async updateContactById(_options) {
            throw this.createUnimplementedException();
        }
        createUnavailableException() {
            return new core.CapacitorException('Not available on this platform.', core.ExceptionCode.Unavailable);
        }
        createUnimplementedException() {
            return new core.CapacitorException('Not implemented on this platform.', core.ExceptionCode.Unimplemented);
        }
    }

    var web = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ContactsWeb: ContactsWeb
    });

    exports.Contacts = Contacts;

    return exports;

})({}, capacitorExports);
//# sourceMappingURL=plugin.js.map
