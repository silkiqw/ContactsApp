{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAqwBA;;GAEG;AACH,MAAM,CAAN,IAAY,gBAmCX;AAnCD,WAAY,gBAAgB;IAC1B;;OAEG;IACH,qCAAiB,CAAA;IACjB;;OAEG;IACH,iCAAa,CAAA;IACb;;;;OAIG;IACH,qCAAiB,CAAA;IACjB;;;;OAIG;IACH,qCAAiB,CAAA;IACjB;;OAEG;IACH,mCAAe,CAAA;IACf;;;;OAIG;IACH,qCAAiB,CAAA;IACjB;;OAEG;IACH,iCAAa,CAAA;AACf,CAAC,EAnCW,gBAAgB,KAAhB,gBAAgB,QAmC3B;AA2ED;;GAEG;AACH,MAAM,CAAN,IAAY,eAiHX;AAjHD,WAAY,eAAe;IACzB;;;;OAIG;IACH,0CAAuB,CAAA;IACvB;;;;OAIG;IACH,wCAAqB,CAAA;IACrB;;;;OAIG;IACH,8BAAW,CAAA;IACX;;;;OAIG;IACH,+CAA4B,CAAA;IAC5B;;OAEG;IACH,oCAAiB,CAAA;IACjB;;OAEG;IACH,uCAAoB,CAAA;IACpB;;OAEG;IACH,yCAAsB,CAAA;IACtB;;OAEG;IACH,uCAAoB,CAAA;IACpB;;OAEG;IACH,gCAAa,CAAA;IACb;;;;OAIG;IACH,oCAAiB,CAAA;IACjB;;;;OAIG;IACH,gCAAa,CAAA;IACb;;OAEG;IACH,gCAAa,CAAA;IACb;;;;OAIG;IACH,8BAAW,CAAA;IACX;;OAEG;IACH,oCAAiB,CAAA;IACjB;;OAEG;IACH,kCAAe,CAAA;IACf;;OAEG;IACH,kCAAe,CAAA;IACf;;;;OAIG;IACH,kCAAe,CAAA;IACf;;;;OAIG;IACH,kCAAe,CAAA;IACf;;;;OAIG;IACH,qCAAkB,CAAA;IAClB;;OAEG;IACH,gCAAa,CAAA;IACb;;;;OAIG;IACH,6CAA0B,CAAA;IAC1B;;;;OAIG;IACH,2CAAwB,CAAA;AAC1B,CAAC,EAjHW,eAAe,KAAf,eAAe,QAiH1B;AAkGD;;GAEG;AACH,MAAM,CAAN,IAAY,iBAiBX;AAjBD,WAAY,iBAAiB;IAC3B;;OAEG;IACH,sCAAiB,CAAA;IACjB;;OAEG;IACH,kCAAa,CAAA;IACb;;OAEG;IACH,oCAAe,CAAA;IACf;;OAEG;IACH,kCAAa,CAAA;AACf,CAAC,EAjBW,iBAAiB,KAAjB,iBAAiB,QAiB5B;AAyBD,MAAM,CAAN,IAAY,cA6CX;AA7CD,WAAY,cAAc;IACxB;;;;OAIG;IACH,+BAAa,CAAA;IACb;;OAEG;IACH,mCAAiB,CAAA;IACjB;;;;OAIG;IACH,6BAAW,CAAA;IACX;;OAEG;IACH,+BAAa,CAAA;IACb;;OAEG;IACH,uCAAqB,CAAA;IACrB;;OAEG;IACH,iCAAe,CAAA;IACf;;;;OAIG;IACH,qCAAmB,CAAA;IACnB;;;;OAIG;IACH,mCAAiB,CAAA;IACjB;;OAEG;IACH,+BAAa,CAAA;AACf,CAAC,EA7CW,cAAc,KAAd,cAAc,QA6CzB","sourcesContent":["import type { PermissionState } from '@capacitor/core';\n\nexport type ContactsPermissionState = PermissionState | 'limited';\n\nexport type ContactsPermissionType = 'readContacts' | 'writeContacts';\n\nexport interface ContactsPlugin {\n  /**\n   * Count the number of contacts on the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.4.0\n   */\n  countContacts(): Promise<CountContactsResult>;\n  /**\n   * Create a new contact on the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  createContact(options: CreateContactOptions): Promise<CreateContactResult>;\n  /**\n   * Create a new contact group on the device.\n   *\n   * Only available on iOS.\n   *\n   * @since 7.4.0\n   */\n  createGroup(options: CreateGroupOptions): Promise<CreateGroupResult>;\n  /**\n   * Delete a contact from the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  deleteContactById(options: DeleteContactByIdOptions): Promise<void>;\n  /**\n   * Delete a contact group from the device.\n   *\n   * Only available on iOS.\n   *\n   * @since 7.4.0\n   */\n  deleteGroupById(options: DeleteGroupByIdOptions): Promise<void>;\n  /**\n   * Display an existing contact by identifier.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.4.0\n   */\n  displayContactById(options: DisplayContactByIdOptions): Promise<void>;\n  /**\n   * Open a native modal to create a new device contact.\n   *\n   * This allows the user to update the contact information before saving it\n   * and does not require any permissions.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.2.0\n   */\n  displayCreateContact(\n    options?: DisplayCreateContactOptions,\n  ): Promise<DisplayCreateContactResult>;\n  /**\n   * Open a native modal to update a contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.4.0\n   */\n  displayUpdateContactById(\n    options: DisplayUpdateContactByIdOptions,\n  ): Promise<void>;\n  /**\n   * List all accounts on the device.\n   *\n   * Only available on Android.\n   *\n   * @since 7.4.0\n   */\n  getAccounts(): Promise<GetAccountsResult>;\n  /**\n   * Find a contact by identifier.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  getContactById(options: GetContactByIdOptions): Promise<GetContactByIdResult>;\n  /**\n   * List all contacts on the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  getContacts(options?: GetContactsOptions): Promise<GetContactsResult>;\n  /**\n   * Find a contact group by identifier.\n   *\n   * Only available on iOS.\n   *\n   * @since 7.4.0\n   */\n  getGroupById(options: GetGroupByIdOptions): Promise<GetGroupByIdResult>;\n  /**\n   * List all contact groups on the device.\n   *\n   * Only available on iOS.\n   *\n   * @since 7.4.0\n   */\n  getGroups(): Promise<GetGroupsResult>;\n  /**\n   * Check whether or not contacts is available on the device.\n   *\n   * @since 7.6.0\n   */\n  isAvailable(): Promise<IsAvailableResult>;\n  /**\n   * Check if the contacts API is available on the device.\n   *\n   * @since 7.0.0\n   * @deprecated Use `isAvailable()` instead.\n   */\n  isSupported(): Promise<IsSupportedResult>;\n  /**\n   * Open the contact picker to select a contact from the device.\n   *\n   * @since 7.0.0\n   * @deprecated Use `pickContacts(...)` instead.\n   */\n  pickContact(options?: PickContactOptions): Promise<PickContactResult>;\n  /**\n   * Open the contact picker to select a contact from the device.\n   *\n   * @since 7.4.0\n   */\n  pickContacts(options?: PickContactsOptions): Promise<PickContactsResult>;\n  /**\n   * Update an existing contact on the device.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.4.0\n   */\n  updateContactById(options: UpdateContactByIdOptions): Promise<void>;\n  /**\n   * Check permissions to access contacts.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Request permissions to access contacts.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  requestPermissions(\n    options?: RequestPermissionsOptions,\n  ): Promise<PermissionStatus>;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface Account {\n  /**\n   * The account name.\n   *\n   * Only available on Android.\n   *\n   * @since 7.4.0\n   * @example 'john@doe.com'\n   */\n  name: string;\n  /**\n   * The account type.\n   *\n   * Only available on Android.\n   *\n   * @since 7.4.0\n   * @example 'com.google'\n   */\n  type: string;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface Contact {\n  /**\n   * The account associated with the contact.\n   *\n   * Only available on Android.\n   *\n   * @since 7.4.0\n   */\n  account?: Account;\n  /**\n   * The birthday of the contact.\n   *\n   * @since 7.3.0\n   */\n  birthday?: Birthday;\n  /**\n   * The list of email addresses for the contact.\n   *\n   * @since 7.0.0\n   */\n  emailAddresses?: EmailAddress[];\n  /**\n   * The family name of the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'Doe'\n   */\n  familyName?: string;\n  /**\n   * The given name of the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'John'\n   */\n  givenName?: string;\n  /**\n   * The identifier of the groups the contact belongs to.\n   *\n   * Only available on iOS.\n   *\n   * @since 7.4.0\n   * @example ['904DE809-D144-4562-8552-DFEB91F0E4BD:ABGroup']\n   */\n  groupIds?: string[];\n  /**\n   * The identifier for the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example '1'\n   * @example '9CA9106E-AFEC-4EA4-BE5E-C58003B4BB11'\n   */\n  id?: string;\n  /**\n   * The job title of the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'Software Developer'\n   */\n  jobTitle?: string;\n  /**\n   * The middle name of the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'Jane'\n   */\n  middleName?: string;\n  /**\n   * The full name of the contact.\n   *\n   * Only available on Web.\n   *\n   * @since 7.0.0\n   */\n  fullName?: string;\n  /**\n   * The name prefix of the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'Mr.'\n   */\n  namePrefix?: string;\n  /**\n   * The name suffix of the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'Jr.'\n   */\n  nameSuffix?: string;\n  /**\n   * A note about the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'This is a note about the contact.'\n   */\n  note?: string;\n  /**\n   * The organization name of the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'Company Inc.'\n   */\n  organizationName?: string;\n  /**\n   * The list of phone numbers for the contact.\n   *\n   * @since 7.0.0\n   */\n  phoneNumbers?: PhoneNumber[];\n  /**\n   * The photo of the contact as a base64 string.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example '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'\n   */\n  photo?: string;\n  /**\n   * The list of postal addresses for the contact.\n   *\n   * @since 7.0.0\n   */\n  postalAddresses?: PostalAddress[];\n  /**\n   * The list of URL addresses for the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  urlAddresses?: UrlAddress[];\n}\n\n/**\n * @since 7.4.0\n */\nexport interface CountContactsResult {\n  /**\n   * The number of contacts.\n   *\n   * @since 7.4.0\n   */\n  total: number;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface CreateContactOptions {\n  /**\n   * The contact to create.\n   *\n   * @since 7.0.0\n   */\n  contact: Omit<Contact, 'id'>;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface CreateContactResult {\n  /**\n   * The identifier for the created contact.\n   *\n   * @since 7.0.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface CreateGroupOptions {\n  /**\n   * The group to create.\n   *\n   * @since 7.4.0\n   */\n  group: Omit<Group, 'id'>;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface CreateGroupResult {\n  /**\n   * The identifier for the created group.\n   *\n   * @since 7.4.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface DeleteContactByIdOptions {\n  /**\n   * The identifier for the contact.\n   *\n   * @since 7.0.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface DeleteGroupByIdOptions {\n  /**\n   * The identifier for the group.\n   *\n   * @since 7.4.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface DisplayContactByIdOptions {\n  /**\n   * The identifier of the contact to display.\n   *\n   * @since 7.4.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.2.0\n */\nexport interface DisplayCreateContactOptions {\n  /**\n   * The contact to display in the create contact modal.\n   *\n   * @since 7.2.0\n   */\n  contact?: Omit<Contact, 'id'>;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface DisplayCreateContactResult {\n  /**\n   * The identifier for the created contact.\n   *\n   * On **Android**, you need the `readContacts` permission to return the identifier.\n   *\n   * @since 7.4.0\n   */\n  id?: string;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface DisplayUpdateContactByIdOptions {\n  /**\n   * The identifier of the contact to update.\n   *\n   * @since 7.4.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface GetAccountsResult {\n  /**\n   * An array of available accounts on the device.\n   *\n   * @since 7.4.0\n   */\n  accounts: Account[];\n}\n\n/**\n * @since 7.0.0\n */\nexport interface GetContactByIdOptions {\n  /**\n   * The fields to return for the contact.\n   *\n   * @since 7.1.0\n   * @default ['birthday', 'emailAddresses', 'familyName', 'givenName', 'id', 'jobTitle', 'middleName', 'namePrefix', 'nameSuffix', 'organizationName', 'phoneNumbers', 'postalAddresses', 'urlAddresses']\n   * @example ['id', 'givenName', 'familyName']\n   */\n  fields?: ContactField[];\n  /**\n   * The identifier for the contact.\n   *\n   * @since 7.0.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.1.0\n */\nexport interface GetContactsOptions {\n  /**\n   * The fields to return for the contact.\n   *\n   * @since 7.1.0\n   * @default ['emailAddresses', 'familyName', 'givenName', 'id', 'jobTitle', 'middleName', 'namePrefix', 'nameSuffix', 'organizationName', 'phoneNumbers', 'postalAddresses', 'urlAddresses']\n   * @example ['id', 'givenName', 'familyName']\n   */\n  fields?: ContactField[];\n  /**\n   * Limit the number of contacts returned.\n   *\n   * @since 7.4.0\n   * @default 1000\n   */\n  limit?: number;\n  /**\n   * Offset the number of contacts returned.\n   *\n   * @since 7.4.0\n   * @default 0\n   */\n  offset?: number;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface GetGroupByIdOptions {\n  /**\n   * The identifier for the group.\n   *\n   * @since 7.4.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface GetGroupByIdResult {\n  /**\n   * The group with the specified identifier.\n   *\n   * @since 7.4.0\n   */\n  group: Group | null;\n}\n\n/**\n * @since 7.4.0\n */\nexport interface GetGroupsResult {\n  /**\n   * The list of groups on the device.\n   *\n   * @since 7.4.0\n   */\n  groups: Group[];\n}\n\n/**\n * @since 7.1.0\n */\nexport type ContactField = keyof Contact;\n\n/**\n * @since 7.0.0\n */\nexport interface GetContactByIdResult {\n  contact: Contact | null;\n}\n\n/**\n * @since 7.6.0\n */\nexport interface IsAvailableResult {\n  /**\n   * Whether or not contacts is available on the device.\n   *\n   * @since 7.6.0\n   * @example true\n   */\n  isAvailable: boolean;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface IsSupportedResult {\n  /**\n   * Whether the contacts API is available on the device.\n   *\n   * This is always `true` on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example true\n   */\n  isSupported: boolean;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface GetContactsResult {\n  /**\n   * The list of contacts on the device.\n   *\n   * **Note**: No photos are returned to avoid performance issues.\n   *\n   * @since 7.0.0\n   */\n  contacts: Contact[];\n}\n\n/**\n * @since 7.0.0\n */\nexport type PickContactOptions = PickContactsOptions;\n\n/**\n * @since 7.4.0\n */\nexport interface PickContactsOptions {\n  /**\n   * The fields to return for the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.4.0\n   * @default ['birthday', 'emailAddresses', 'familyName', 'givenName', 'id', 'jobTitle', 'middleName', 'namePrefix', 'nameSuffix', 'organizationName', 'phoneNumbers', 'postalAddresses', 'urlAddresses']\n   * @example ['id', 'givenName', 'familyName']\n   */\n  fields: ContactField[];\n  /**\n   * Whether to allow selecting multiple contacts.\n   *\n   * Only available on Web.\n   *\n   * @since 7.0.0\n   * @default false\n   */\n  multiple?: boolean;\n}\n\n/**\n * @since 7.0.0\n */\nexport type PickContactResult = PickContactsResult;\n\n/**\n * @since 7.4.0\n */\nexport interface PickContactsResult {\n  /**\n   * The selected contacts. Empty if none were selected.\n   *\n   * @since 7.0.0\n   */\n  contacts: Contact[];\n}\n\n/**\n * @since 7.0.0\n */\nexport interface RequestPermissionsOptions {\n  /**\n   * The permissions to request.\n   *\n   * @since 7.0.0\n   * @default ['readContacts', 'writeContacts']\n   */\n  permissions: ContactsPermissionType[];\n}\n\nexport interface UpdateContactByIdOptions {\n  /**\n   * The updated contact information.\n   *\n   * **Attention**: All fields are required to be provided, even if they are not updated.\n   * Fields that are not provided will be removed from the contact.\n   *\n   * @since 7.4.0\n   */\n  contact: Omit<Contact, 'id'>;\n  /**\n   * The identifier for the contact.\n   *\n   * @since 7.4.0\n   */\n  id: string;\n}\n\n/**\n * @since 7.3.0\n */\nexport interface Birthday {\n  /**\n   * The day of the birthdate.\n   *\n   * @since 7.3.0\n   */\n  day: number;\n  /**\n   * The month of the birthdate.\n   *\n   * @since 7.3.0\n   */\n  month: number;\n  /**\n   * The year of the birthdate.\n   *\n   * On **Android**, this must be provided if the `day` and `month` are provided\n   * when using the `displayCreateContact(...)` method.\n   *\n   * @since 7.3.0\n   */\n  year?: number;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface EmailAddress {\n  /**\n   * Whether this email address is the primary one for the contact.\n   *\n   * @since 7.0.0\n   * @default false\n   */\n  isPrimary?: boolean;\n  /**\n   * A custom label for the email address.\n   *\n   * On **iOS**, this label is only set if the type is `EmailAddressType.Custom`.\n   *\n   * @since 7.0.0\n   */\n  label?: string;\n  /**\n   * The type of email address.\n   *\n   * @since 7.0.0\n   * @default EmailAddressType.Other\n   */\n  type?: EmailAddressType;\n  /**\n   * The email address.\n   *\n   * @since 7.0.0\n   */\n  value: string;\n}\n\n/**\n * @since 7.0.0\n */\nexport enum EmailAddressType {\n  /**\n   * @since 7.0.0\n   */\n  Custom = 'CUSTOM',\n  /**\n   * @since 7.0.0\n   */\n  Home = 'HOME',\n  /**\n   * Only available on iOS.\n   *\n   * @since 7.0.0\n   */\n  ICloud = 'ICLOUD',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Mobile = 'MOBILE',\n  /**\n   * @since 7.0.0\n   */\n  Other = 'OTHER',\n  /**\n   * Only available on iOS.\n   *\n   * @since 7.0.0\n   */\n  School = 'SCHOOL',\n  /**\n   * @since 7.0.0\n   */\n  Work = 'WORK',\n}\n\n/**\n * @since 7.4.0\n */\nexport interface Group {\n  /**\n   * The identifier for the group.\n   *\n   * @since 7.4.0\n   * @example \"904DE809-D144-4562-8552-DFEB91F0E4BD:ABGroup\"\n   */\n  id: string;\n  /**\n   * The name of the group.\n   *\n   * @since 7.4.0\n   * @example \"Work\"\n   */\n  name: string;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface PermissionStatus {\n  /**\n   * Permission state for reading contacts.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  readContacts?: ContactsPermissionState;\n  /**\n   * Permission state for writing contacts.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  writeContacts?: ContactsPermissionState;\n}\n\n/**\n * @since 7.0.0\n */\nexport interface PhoneNumber {\n  /**\n   * Whether this email address is the primary one for the contact.\n   *\n   * @since 7.0.0\n   */\n  isPrimary?: boolean;\n  /**\n   * A custom label for the phone number.\n   *\n   * On **iOS**, this label is only set if the type is `PhoneNumberType.Custom`.\n   *\n   * @since 7.0.0\n   */\n  label?: string;\n  /**\n   * The type of phone number.\n   *\n   * @since 7.0.0\n   * @default PhoneNumberType.Other\n   */\n  type?: PhoneNumberType;\n  /**\n   * The phone number.\n   */\n  value: string;\n}\n\n/**\n * @since 7.0.0\n */\nexport enum PhoneNumberType {\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Assistant = 'ASSISTANT',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Callback = 'CALLBACK',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Car = 'CAR',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  CompanyMain = 'COMPANY_MAIN',\n  /**\n   * @since 7.0.0\n   */\n  Custom = 'CUSTOM',\n  /**\n   * @since 7.0.0\n   */\n  FaxHome = 'FAX_HOME',\n  /**\n   * @since 7.0.0\n   */\n  FaxOther = 'FAX_OTHER',\n  /**\n   * @since 7.0.0\n   */\n  FaxWork = 'FAX_WORK',\n  /**\n   * @since 7.0.0\n   */\n  Home = 'HOME',\n  /**\n   * Only available on iOS.\n   *\n   * @since 7.0.0\n   */\n  IPhone = 'IPHONE',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Isdn = 'ISDN',\n  /**\n   * @since 7.0.0\n   */\n  Main = 'MAIN',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Mms = 'MMS',\n  /**\n   * @since 7.0.0\n   */\n  Mobile = 'MOBILE',\n  /**\n   * @since 7.0.0\n   */\n  Other = 'OTHER',\n  /**\n   * @since 7.0.0\n   */\n  Pager = 'PAGER',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Radio = 'RADIO',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  Telex = 'TELEX',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  TtyTdd = 'TTY_TDD',\n  /**\n   * @since 7.0.0\n   */\n  Work = 'WORK',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  WorkMobile = 'WORK_MOBILE',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.0.0\n   */\n  WorkPager = 'WORK_PAGER',\n}\n\n/**\n * @since 7.0.0\n */\nexport interface PostalAddress {\n  /**\n   * The city for the postal address.\n   *\n   * @since 7.0.0\n   * @example 'San Francisco'\n   */\n  city?: string;\n  /**\n   * The country for the postal address.\n   *\n   * @since 7.0.0\n   * @example 'United States'\n   */\n  country?: string;\n  /**\n   * The formatted postal address.\n   *\n   * @since 7.0.0\n   */\n  formatted?: string;\n  /**\n   * The ISO country code for the postal address.\n   *\n   * Only available on iOS.\n   *\n   * @since 7.0.0\n   */\n  isoCountryCode?: string;\n  /**\n   * Whether this postal address is the primary one for the contact.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @default false\n   */\n  isPrimary?: boolean;\n  /**\n   * A custom label for the postal address.\n   *\n   * On **iOS**, this label is only set if the type is `PostalAddressType.Custom`.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   */\n  label?: string;\n  /**\n   * The neighborhood for the postal address.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example 'Downtown'\n   */\n  neighborhood?: string;\n  /**\n   * The postal code for the postal address.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example '12345'\n   */\n  postalCode?: string;\n  /**\n   * The state for the postal address.\n   *\n   * @since 7.0.0\n   * @example 'CA'\n   */\n  state?: string;\n  /**\n   * The street for the postal address.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @example '123 Main St'\n   */\n  street?: string;\n  /**\n   * The type of postal address.\n   *\n   * Only available on Android and iOS.\n   *\n   * @since 7.0.0\n   * @default PostalAddressType.Other\n   */\n  type?: PostalAddressType;\n}\n\n/**\n * @since 7.0.0\n */\nexport enum PostalAddressType {\n  /**\n   * @since 7.0.0\n   */\n  Custom = 'CUSTOM',\n  /**\n   * @since 7.0.0\n   */\n  Home = 'HOME',\n  /**\n   * @since 7.0.0\n   */\n  Other = 'OTHER',\n  /**\n   * @since 7.0.0\n   */\n  Work = 'WORK',\n}\n\n/**\n * @since 7.0.0\n */\nexport interface UrlAddress {\n  /**\n   * A custom label for the URL address.\n   *\n   * @since 7.5.0\n   */\n  label?: string;\n  /**\n   * The type of URL address.\n   *\n   * @since 7.5.0\n   * @default UrlAddressType.Other\n   */\n  type?: UrlAddressType;\n  /**\n   * The URL address.\n   */\n  value: string;\n}\n\nexport enum UrlAddressType {\n  /**\n   * Only available on Android.\n   *\n   * @since 7.5.0\n   */\n  Blog = 'BLOG',\n  /**\n   * @since 7.5.0\n   */\n  Custom = 'CUSTOM',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.5.0\n   */\n  Ftp = 'FTP',\n  /**\n   * @since 7.5.0\n   */\n  Home = 'HOME',\n  /**\n   * @since 7.5.0\n   */\n  Homepage = 'HOMEPAGE',\n  /**\n   * @since 7.5.0\n   */\n  Other = 'OTHER',\n  /**\n   * Only available on Android.\n   *\n   * @since 7.5.0\n   */\n  Profile = 'PROFILE',\n  /**\n   * Only available on iOS.\n   *\n   * @since 7.5.0\n   */\n  School = 'SCHOOL',\n  /**\n   * @since 7.5.0\n   */\n  Work = 'WORK',\n}\n"]}