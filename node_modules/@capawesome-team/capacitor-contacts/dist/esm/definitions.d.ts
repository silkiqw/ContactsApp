import type { PermissionState } from '@capacitor/core';
export declare type ContactsPermissionState = PermissionState | 'limited';
export declare type ContactsPermissionType = 'readContacts' | 'writeContacts';
export interface ContactsPlugin {
    /**
     * Count the number of contacts on the device.
     *
     * Only available on Android and iOS.
     *
     * @since 7.4.0
     */
    countContacts(): Promise<CountContactsResult>;
    /**
     * Create a new contact on the device.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    createContact(options: CreateContactOptions): Promise<CreateContactResult>;
    /**
     * Create a new contact group on the device.
     *
     * Only available on iOS.
     *
     * @since 7.4.0
     */
    createGroup(options: CreateGroupOptions): Promise<CreateGroupResult>;
    /**
     * Delete a contact from the device.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    deleteContactById(options: DeleteContactByIdOptions): Promise<void>;
    /**
     * Delete a contact group from the device.
     *
     * Only available on iOS.
     *
     * @since 7.4.0
     */
    deleteGroupById(options: DeleteGroupByIdOptions): Promise<void>;
    /**
     * Display an existing contact by identifier.
     *
     * Only available on Android and iOS.
     *
     * @since 7.4.0
     */
    displayContactById(options: DisplayContactByIdOptions): Promise<void>;
    /**
     * Open a native modal to create a new device contact.
     *
     * This allows the user to update the contact information before saving it
     * and does not require any permissions.
     *
     * Only available on Android and iOS.
     *
     * @since 7.2.0
     */
    displayCreateContact(options?: DisplayCreateContactOptions): Promise<DisplayCreateContactResult>;
    /**
     * Open a native modal to update a contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.4.0
     */
    displayUpdateContactById(options: DisplayUpdateContactByIdOptions): Promise<void>;
    /**
     * List all accounts on the device.
     *
     * Only available on Android.
     *
     * @since 7.4.0
     */
    getAccounts(): Promise<GetAccountsResult>;
    /**
     * Find a contact by identifier.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    getContactById(options: GetContactByIdOptions): Promise<GetContactByIdResult>;
    /**
     * List all contacts on the device.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    getContacts(options?: GetContactsOptions): Promise<GetContactsResult>;
    /**
     * Find a contact group by identifier.
     *
     * Only available on iOS.
     *
     * @since 7.4.0
     */
    getGroupById(options: GetGroupByIdOptions): Promise<GetGroupByIdResult>;
    /**
     * List all contact groups on the device.
     *
     * Only available on iOS.
     *
     * @since 7.4.0
     */
    getGroups(): Promise<GetGroupsResult>;
    /**
     * Check whether or not contacts is available on the device.
     *
     * @since 7.6.0
     */
    isAvailable(): Promise<IsAvailableResult>;
    /**
     * Check if the contacts API is available on the device.
     *
     * @since 7.0.0
     * @deprecated Use `isAvailable()` instead.
     */
    isSupported(): Promise<IsSupportedResult>;
    /**
     * Open the contact picker to select a contact from the device.
     *
     * @since 7.0.0
     * @deprecated Use `pickContacts(...)` instead.
     */
    pickContact(options?: PickContactOptions): Promise<PickContactResult>;
    /**
     * Open the contact picker to select a contact from the device.
     *
     * @since 7.4.0
     */
    pickContacts(options?: PickContactsOptions): Promise<PickContactsResult>;
    /**
     * Update an existing contact on the device.
     *
     * Only available on Android and iOS.
     *
     * @since 7.4.0
     */
    updateContactById(options: UpdateContactByIdOptions): Promise<void>;
    /**
     * Check permissions to access contacts.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    checkPermissions(): Promise<PermissionStatus>;
    /**
     * Request permissions to access contacts.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    requestPermissions(options?: RequestPermissionsOptions): Promise<PermissionStatus>;
}
/**
 * @since 7.4.0
 */
export interface Account {
    /**
     * The account name.
     *
     * Only available on Android.
     *
     * @since 7.4.0
     * @example 'john@doe.com'
     */
    name: string;
    /**
     * The account type.
     *
     * Only available on Android.
     *
     * @since 7.4.0
     * @example 'com.google'
     */
    type: string;
}
/**
 * @since 7.0.0
 */
export interface Contact {
    /**
     * The account associated with the contact.
     *
     * Only available on Android.
     *
     * @since 7.4.0
     */
    account?: Account;
    /**
     * The birthday of the contact.
     *
     * @since 7.3.0
     */
    birthday?: Birthday;
    /**
     * The list of email addresses for the contact.
     *
     * @since 7.0.0
     */
    emailAddresses?: EmailAddress[];
    /**
     * The family name of the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'Doe'
     */
    familyName?: string;
    /**
     * The given name of the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'John'
     */
    givenName?: string;
    /**
     * The identifier of the groups the contact belongs to.
     *
     * Only available on iOS.
     *
     * @since 7.4.0
     * @example ['904DE809-D144-4562-8552-DFEB91F0E4BD:ABGroup']
     */
    groupIds?: string[];
    /**
     * The identifier for the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example '1'
     * @example '9CA9106E-AFEC-4EA4-BE5E-C58003B4BB11'
     */
    id?: string;
    /**
     * The job title of the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'Software Developer'
     */
    jobTitle?: string;
    /**
     * The middle name of the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'Jane'
     */
    middleName?: string;
    /**
     * The full name of the contact.
     *
     * Only available on Web.
     *
     * @since 7.0.0
     */
    fullName?: string;
    /**
     * The name prefix of the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'Mr.'
     */
    namePrefix?: string;
    /**
     * The name suffix of the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'Jr.'
     */
    nameSuffix?: string;
    /**
     * A note about the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'This is a note about the contact.'
     */
    note?: string;
    /**
     * The organization name of the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'Company Inc.'
     */
    organizationName?: string;
    /**
     * The list of phone numbers for the contact.
     *
     * @since 7.0.0
     */
    phoneNumbers?: PhoneNumber[];
    /**
     * The photo of the contact as a base64 string.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example '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'
     */
    photo?: string;
    /**
     * The list of postal addresses for the contact.
     *
     * @since 7.0.0
     */
    postalAddresses?: PostalAddress[];
    /**
     * The list of URL addresses for the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    urlAddresses?: UrlAddress[];
}
/**
 * @since 7.4.0
 */
export interface CountContactsResult {
    /**
     * The number of contacts.
     *
     * @since 7.4.0
     */
    total: number;
}
/**
 * @since 7.0.0
 */
export interface CreateContactOptions {
    /**
     * The contact to create.
     *
     * @since 7.0.0
     */
    contact: Omit<Contact, 'id'>;
}
/**
 * @since 7.0.0
 */
export interface CreateContactResult {
    /**
     * The identifier for the created contact.
     *
     * @since 7.0.0
     */
    id: string;
}
/**
 * @since 7.4.0
 */
export interface CreateGroupOptions {
    /**
     * The group to create.
     *
     * @since 7.4.0
     */
    group: Omit<Group, 'id'>;
}
/**
 * @since 7.4.0
 */
export interface CreateGroupResult {
    /**
     * The identifier for the created group.
     *
     * @since 7.4.0
     */
    id: string;
}
/**
 * @since 7.0.0
 */
export interface DeleteContactByIdOptions {
    /**
     * The identifier for the contact.
     *
     * @since 7.0.0
     */
    id: string;
}
/**
 * @since 7.4.0
 */
export interface DeleteGroupByIdOptions {
    /**
     * The identifier for the group.
     *
     * @since 7.4.0
     */
    id: string;
}
/**
 * @since 7.4.0
 */
export interface DisplayContactByIdOptions {
    /**
     * The identifier of the contact to display.
     *
     * @since 7.4.0
     */
    id: string;
}
/**
 * @since 7.2.0
 */
export interface DisplayCreateContactOptions {
    /**
     * The contact to display in the create contact modal.
     *
     * @since 7.2.0
     */
    contact?: Omit<Contact, 'id'>;
}
/**
 * @since 7.4.0
 */
export interface DisplayCreateContactResult {
    /**
     * The identifier for the created contact.
     *
     * On **Android**, you need the `readContacts` permission to return the identifier.
     *
     * @since 7.4.0
     */
    id?: string;
}
/**
 * @since 7.4.0
 */
export interface DisplayUpdateContactByIdOptions {
    /**
     * The identifier of the contact to update.
     *
     * @since 7.4.0
     */
    id: string;
}
/**
 * @since 7.4.0
 */
export interface GetAccountsResult {
    /**
     * An array of available accounts on the device.
     *
     * @since 7.4.0
     */
    accounts: Account[];
}
/**
 * @since 7.0.0
 */
export interface GetContactByIdOptions {
    /**
     * The fields to return for the contact.
     *
     * @since 7.1.0
     * @default ['birthday', 'emailAddresses', 'familyName', 'givenName', 'id', 'jobTitle', 'middleName', 'namePrefix', 'nameSuffix', 'organizationName', 'phoneNumbers', 'postalAddresses', 'urlAddresses']
     * @example ['id', 'givenName', 'familyName']
     */
    fields?: ContactField[];
    /**
     * The identifier for the contact.
     *
     * @since 7.0.0
     */
    id: string;
}
/**
 * @since 7.1.0
 */
export interface GetContactsOptions {
    /**
     * The fields to return for the contact.
     *
     * @since 7.1.0
     * @default ['emailAddresses', 'familyName', 'givenName', 'id', 'jobTitle', 'middleName', 'namePrefix', 'nameSuffix', 'organizationName', 'phoneNumbers', 'postalAddresses', 'urlAddresses']
     * @example ['id', 'givenName', 'familyName']
     */
    fields?: ContactField[];
    /**
     * Limit the number of contacts returned.
     *
     * @since 7.4.0
     * @default 1000
     */
    limit?: number;
    /**
     * Offset the number of contacts returned.
     *
     * @since 7.4.0
     * @default 0
     */
    offset?: number;
}
/**
 * @since 7.4.0
 */
export interface GetGroupByIdOptions {
    /**
     * The identifier for the group.
     *
     * @since 7.4.0
     */
    id: string;
}
/**
 * @since 7.4.0
 */
export interface GetGroupByIdResult {
    /**
     * The group with the specified identifier.
     *
     * @since 7.4.0
     */
    group: Group | null;
}
/**
 * @since 7.4.0
 */
export interface GetGroupsResult {
    /**
     * The list of groups on the device.
     *
     * @since 7.4.0
     */
    groups: Group[];
}
/**
 * @since 7.1.0
 */
export declare type ContactField = keyof Contact;
/**
 * @since 7.0.0
 */
export interface GetContactByIdResult {
    contact: Contact | null;
}
/**
 * @since 7.6.0
 */
export interface IsAvailableResult {
    /**
     * Whether or not contacts is available on the device.
     *
     * @since 7.6.0
     * @example true
     */
    isAvailable: boolean;
}
/**
 * @since 7.0.0
 */
export interface IsSupportedResult {
    /**
     * Whether the contacts API is available on the device.
     *
     * This is always `true` on Android and iOS.
     *
     * @since 7.0.0
     * @example true
     */
    isSupported: boolean;
}
/**
 * @since 7.0.0
 */
export interface GetContactsResult {
    /**
     * The list of contacts on the device.
     *
     * **Note**: No photos are returned to avoid performance issues.
     *
     * @since 7.0.0
     */
    contacts: Contact[];
}
/**
 * @since 7.0.0
 */
export declare type PickContactOptions = PickContactsOptions;
/**
 * @since 7.4.0
 */
export interface PickContactsOptions {
    /**
     * The fields to return for the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.4.0
     * @default ['birthday', 'emailAddresses', 'familyName', 'givenName', 'id', 'jobTitle', 'middleName', 'namePrefix', 'nameSuffix', 'organizationName', 'phoneNumbers', 'postalAddresses', 'urlAddresses']
     * @example ['id', 'givenName', 'familyName']
     */
    fields: ContactField[];
    /**
     * Whether to allow selecting multiple contacts.
     *
     * Only available on Web.
     *
     * @since 7.0.0
     * @default false
     */
    multiple?: boolean;
}
/**
 * @since 7.0.0
 */
export declare type PickContactResult = PickContactsResult;
/**
 * @since 7.4.0
 */
export interface PickContactsResult {
    /**
     * The selected contacts. Empty if none were selected.
     *
     * @since 7.0.0
     */
    contacts: Contact[];
}
/**
 * @since 7.0.0
 */
export interface RequestPermissionsOptions {
    /**
     * The permissions to request.
     *
     * @since 7.0.0
     * @default ['readContacts', 'writeContacts']
     */
    permissions: ContactsPermissionType[];
}
export interface UpdateContactByIdOptions {
    /**
     * The updated contact information.
     *
     * **Attention**: All fields are required to be provided, even if they are not updated.
     * Fields that are not provided will be removed from the contact.
     *
     * @since 7.4.0
     */
    contact: Omit<Contact, 'id'>;
    /**
     * The identifier for the contact.
     *
     * @since 7.4.0
     */
    id: string;
}
/**
 * @since 7.3.0
 */
export interface Birthday {
    /**
     * The day of the birthdate.
     *
     * @since 7.3.0
     */
    day: number;
    /**
     * The month of the birthdate.
     *
     * @since 7.3.0
     */
    month: number;
    /**
     * The year of the birthdate.
     *
     * On **Android**, this must be provided if the `day` and `month` are provided
     * when using the `displayCreateContact(...)` method.
     *
     * @since 7.3.0
     */
    year?: number;
}
/**
 * @since 7.0.0
 */
export interface EmailAddress {
    /**
     * Whether this email address is the primary one for the contact.
     *
     * @since 7.0.0
     * @default false
     */
    isPrimary?: boolean;
    /**
     * A custom label for the email address.
     *
     * On **iOS**, this label is only set if the type is `EmailAddressType.Custom`.
     *
     * @since 7.0.0
     */
    label?: string;
    /**
     * The type of email address.
     *
     * @since 7.0.0
     * @default EmailAddressType.Other
     */
    type?: EmailAddressType;
    /**
     * The email address.
     *
     * @since 7.0.0
     */
    value: string;
}
/**
 * @since 7.0.0
 */
export declare enum EmailAddressType {
    /**
     * @since 7.0.0
     */
    Custom = "CUSTOM",
    /**
     * @since 7.0.0
     */
    Home = "HOME",
    /**
     * Only available on iOS.
     *
     * @since 7.0.0
     */
    ICloud = "ICLOUD",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Mobile = "MOBILE",
    /**
     * @since 7.0.0
     */
    Other = "OTHER",
    /**
     * Only available on iOS.
     *
     * @since 7.0.0
     */
    School = "SCHOOL",
    /**
     * @since 7.0.0
     */
    Work = "WORK"
}
/**
 * @since 7.4.0
 */
export interface Group {
    /**
     * The identifier for the group.
     *
     * @since 7.4.0
     * @example "904DE809-D144-4562-8552-DFEB91F0E4BD:ABGroup"
     */
    id: string;
    /**
     * The name of the group.
     *
     * @since 7.4.0
     * @example "Work"
     */
    name: string;
}
/**
 * @since 7.0.0
 */
export interface PermissionStatus {
    /**
     * Permission state for reading contacts.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    readContacts?: ContactsPermissionState;
    /**
     * Permission state for writing contacts.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    writeContacts?: ContactsPermissionState;
}
/**
 * @since 7.0.0
 */
export interface PhoneNumber {
    /**
     * Whether this email address is the primary one for the contact.
     *
     * @since 7.0.0
     */
    isPrimary?: boolean;
    /**
     * A custom label for the phone number.
     *
     * On **iOS**, this label is only set if the type is `PhoneNumberType.Custom`.
     *
     * @since 7.0.0
     */
    label?: string;
    /**
     * The type of phone number.
     *
     * @since 7.0.0
     * @default PhoneNumberType.Other
     */
    type?: PhoneNumberType;
    /**
     * The phone number.
     */
    value: string;
}
/**
 * @since 7.0.0
 */
export declare enum PhoneNumberType {
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Assistant = "ASSISTANT",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Callback = "CALLBACK",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Car = "CAR",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    CompanyMain = "COMPANY_MAIN",
    /**
     * @since 7.0.0
     */
    Custom = "CUSTOM",
    /**
     * @since 7.0.0
     */
    FaxHome = "FAX_HOME",
    /**
     * @since 7.0.0
     */
    FaxOther = "FAX_OTHER",
    /**
     * @since 7.0.0
     */
    FaxWork = "FAX_WORK",
    /**
     * @since 7.0.0
     */
    Home = "HOME",
    /**
     * Only available on iOS.
     *
     * @since 7.0.0
     */
    IPhone = "IPHONE",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Isdn = "ISDN",
    /**
     * @since 7.0.0
     */
    Main = "MAIN",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Mms = "MMS",
    /**
     * @since 7.0.0
     */
    Mobile = "MOBILE",
    /**
     * @since 7.0.0
     */
    Other = "OTHER",
    /**
     * @since 7.0.0
     */
    Pager = "PAGER",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Radio = "RADIO",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    Telex = "TELEX",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    TtyTdd = "TTY_TDD",
    /**
     * @since 7.0.0
     */
    Work = "WORK",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    WorkMobile = "WORK_MOBILE",
    /**
     * Only available on Android.
     *
     * @since 7.0.0
     */
    WorkPager = "WORK_PAGER"
}
/**
 * @since 7.0.0
 */
export interface PostalAddress {
    /**
     * The city for the postal address.
     *
     * @since 7.0.0
     * @example 'San Francisco'
     */
    city?: string;
    /**
     * The country for the postal address.
     *
     * @since 7.0.0
     * @example 'United States'
     */
    country?: string;
    /**
     * The formatted postal address.
     *
     * @since 7.0.0
     */
    formatted?: string;
    /**
     * The ISO country code for the postal address.
     *
     * Only available on iOS.
     *
     * @since 7.0.0
     */
    isoCountryCode?: string;
    /**
     * Whether this postal address is the primary one for the contact.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @default false
     */
    isPrimary?: boolean;
    /**
     * A custom label for the postal address.
     *
     * On **iOS**, this label is only set if the type is `PostalAddressType.Custom`.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     */
    label?: string;
    /**
     * The neighborhood for the postal address.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example 'Downtown'
     */
    neighborhood?: string;
    /**
     * The postal code for the postal address.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example '12345'
     */
    postalCode?: string;
    /**
     * The state for the postal address.
     *
     * @since 7.0.0
     * @example 'CA'
     */
    state?: string;
    /**
     * The street for the postal address.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @example '123 Main St'
     */
    street?: string;
    /**
     * The type of postal address.
     *
     * Only available on Android and iOS.
     *
     * @since 7.0.0
     * @default PostalAddressType.Other
     */
    type?: PostalAddressType;
}
/**
 * @since 7.0.0
 */
export declare enum PostalAddressType {
    /**
     * @since 7.0.0
     */
    Custom = "CUSTOM",
    /**
     * @since 7.0.0
     */
    Home = "HOME",
    /**
     * @since 7.0.0
     */
    Other = "OTHER",
    /**
     * @since 7.0.0
     */
    Work = "WORK"
}
/**
 * @since 7.0.0
 */
export interface UrlAddress {
    /**
     * A custom label for the URL address.
     *
     * @since 7.5.0
     */
    label?: string;
    /**
     * The type of URL address.
     *
     * @since 7.5.0
     * @default UrlAddressType.Other
     */
    type?: UrlAddressType;
    /**
     * The URL address.
     */
    value: string;
}
export declare enum UrlAddressType {
    /**
     * Only available on Android.
     *
     * @since 7.5.0
     */
    Blog = "BLOG",
    /**
     * @since 7.5.0
     */
    Custom = "CUSTOM",
    /**
     * Only available on Android.
     *
     * @since 7.5.0
     */
    Ftp = "FTP",
    /**
     * @since 7.5.0
     */
    Home = "HOME",
    /**
     * @since 7.5.0
     */
    Homepage = "HOMEPAGE",
    /**
     * @since 7.5.0
     */
    Other = "OTHER",
    /**
     * Only available on Android.
     *
     * @since 7.5.0
     */
    Profile = "PROFILE",
    /**
     * Only available on iOS.
     *
     * @since 7.5.0
     */
    School = "SCHOOL",
    /**
     * @since 7.5.0
     */
    Work = "WORK"
}
