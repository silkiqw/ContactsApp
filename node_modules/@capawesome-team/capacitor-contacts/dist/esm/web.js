import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';
export class ContactsWeb extends WebPlugin {
    constructor() {
        super(...arguments);
        this._isSupported = 'contacts' in navigator;
    }
    async countContacts() {
        throw this.createUnimplementedException();
    }
    async createContact(_options) {
        throw this.createUnimplementedException();
    }
    async createGroup(_options) {
        throw this.createUnimplementedException();
    }
    async deleteContactById() {
        throw this.createUnimplementedException();
    }
    async deleteGroupById(_options) {
        throw this.createUnimplementedException();
    }
    async displayContactById(_options) {
        throw this.createUnimplementedException();
    }
    async displayUpdateContactById(_options) {
        throw this.createUnimplementedException();
    }
    async getAccounts() {
        throw this.createUnimplementedException();
    }
    async getContactById(_options) {
        throw this.createUnimplementedException();
    }
    async getGroupById(_options) {
        throw this.createUnimplementedException();
    }
    async getGroups() {
        throw this.createUnimplementedException();
    }
    async isAvailable() {
        return { isAvailable: this._isSupported };
    }
    async isSupported() {
        return { isSupported: this._isSupported };
    }
    async getContacts(_options) {
        throw this.createUnimplementedException();
    }
    async pickContact(options) {
        return this.pickContacts(options);
    }
    async pickContacts(options) {
        var _a;
        if (!this._isSupported) {
            throw this.createUnavailableException();
        }
        const contacts = (await navigator.contacts.select(['address', 'email', 'icon', 'name', 'tel'], { multiple: (_a = options === null || options === void 0 ? void 0 : options.multiple) !== null && _a !== void 0 ? _a : false }));
        return {
            contacts: contacts.map(contact => {
                var _a, _b, _c, _d;
                return ({
                    emailAddresses: (_a = contact.email) === null || _a === void 0 ? void 0 : _a.map(email => ({
                        value: email,
                    })),
                    phoneNumbers: (_b = contact.tel) === null || _b === void 0 ? void 0 : _b.map(tel => ({
                        value: tel,
                    })),
                    postalAddresses: (_c = contact.address) === null || _c === void 0 ? void 0 : _c.map(address => {
                        const postalAddress = {};
                        if (address.city) {
                            postalAddress.city = address.city;
                        }
                        if (address.country) {
                            postalAddress.country = address.country;
                        }
                        if (address.addressLine) {
                            postalAddress.formatted = address.addressLine.join(', ');
                        }
                        if (address.region) {
                            postalAddress.state = address.region;
                        }
                        return postalAddress;
                    }),
                    fullName: (_d = contact.name) === null || _d === void 0 ? void 0 : _d.join(' '),
                });
            }),
        };
    }
    checkPermissions() {
        throw this.createUnimplementedException();
    }
    requestPermissions() {
        throw this.createUnimplementedException();
    }
    displayCreateContact(_options) {
        throw this.createUnimplementedException();
    }
    async updateContactById(_options) {
        throw this.createUnimplementedException();
    }
    createUnavailableException() {
        return new CapacitorException('Not available on this platform.', ExceptionCode.Unavailable);
    }
    createUnimplementedException() {
        return new CapacitorException('Not implemented on this platform.', ExceptionCode.Unimplemented);
    }
}
//# sourceMappingURL=web.js.map