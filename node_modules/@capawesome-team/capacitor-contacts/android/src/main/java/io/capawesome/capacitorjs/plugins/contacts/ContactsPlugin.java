package io.capawesome.capacitorjs.plugins.contacts;

import static android.app.Activity.RESULT_CANCELED;
import static android.app.Activity.RESULT_OK;

import android.Manifest;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.provider.ContactsContract;
import androidx.activity.result.ActivityResult;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.getcapacitor.JSArray;
import com.getcapacitor.JSObject;
import com.getcapacitor.Logger;
import com.getcapacitor.PermissionState;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.ActivityCallback;
import com.getcapacitor.annotation.CapacitorPlugin;
import com.getcapacitor.annotation.Permission;
import com.getcapacitor.annotation.PermissionCallback;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.CreateContactOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DeleteContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DisplayContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DisplayCreateContactOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DisplayUpdateContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.GetContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.GetContactsOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.UpdateContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.CountContactsResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.CreateContactResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.DisplayCreateContactResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.GetAccountsResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.GetContactByIdResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.GetContactsResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.PickContactsResult;
import io.capawesome.capacitorjs.plugins.contacts.interfaces.EmptyCallback;
import io.capawesome.capacitorjs.plugins.contacts.interfaces.NonEmptyResultCallback;
import io.capawesome.capacitorjs.plugins.contacts.interfaces.Result;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.json.JSONException;

@CapacitorPlugin(
    name = "Contacts",
    permissions = {
        @Permission(strings = { Manifest.permission.READ_CONTACTS }, alias = ContactsPlugin.PERMISSION_READ_CONTACTS),
        @Permission(strings = { Manifest.permission.WRITE_CONTACTS }, alias = ContactsPlugin.PERMISSION_WRITE_CONTACTS)
    }
)
public class ContactsPlugin extends Plugin {

    public static final String CALLBACK_PERMISSIONS = "handlePermissionsCallback";
    public static final String CALLBACK_READ_CONTACTS_PERMISSION = "handleReadContactsPermissionCallback";
    public static final String CALLBACK_WRITE_CONTACTS_PERMISSION = "handleWriteContactsPermissionCallback";
    public static final String ERROR_ACCOUNT_NAME_MISSING = "Account name must be provided.";
    public static final String ERROR_ACCOUNT_TYPE_MISSING = "Account type must be provided.";
    public static final String ERROR_BIRTHDAY_DAY_MISSING = "Birthday day must be provided.";
    public static final String ERROR_BIRTHDAY_MONTH_MISSING = "Birthday month must be provided.";
    public static final String ERROR_CONTACT_NOT_FOUND = "Contact not found.";
    public static final String ERROR_CONTACT_MISSING = "contact must be provided.";
    public static final String ERROR_DISPLAY_CREATE_CONTACT_CANCELLED = "displayCreateContact canceled.";
    public static final String ERROR_DISPLAY_UPDATE_CONTACT_BY_ID_CANCELLED = "displayUpdateContactById canceled.";
    public static final String ERROR_ID_MISSING = "id must be provided.";
    public static final String ERROR_READ_CONTACTS_PERMISSION_DENIED = "readContacts permission denied.";
    public static final String ERROR_TYPE_INVALID = "type is invalid.";
    public static final String ERROR_UNKNOWN_ERROR = "An unknown error has occurred.";
    public static final String ERROR_VALUE_MISSING = "value must be provided.";
    public static final String ERROR_WRITE_CONTACTS_PERMISSION_DENIED = "writeContacts permission denied.";
    public static final String PERMISSION_READ_CONTACTS = "readContacts";
    public static final String PERMISSION_WRITE_CONTACTS = "writeContacts";
    public static final String TAG = "ContactsPlugin";

    @Nullable
    private Contacts implementation;

    @Override
    public void load() {
        try {
            implementation = new Contacts(this);
        } catch (Exception exception) {
            Logger.error(ContactsPlugin.TAG, exception.getMessage(), exception);
        }
    }

    @PluginMethod
    public void countContacts(PluginCall call) {
        try {
            if (getPermissionState(PERMISSION_READ_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_READ_CONTACTS, call, CALLBACK_READ_CONTACTS_PERMISSION);
                return;
            }

            NonEmptyResultCallback<CountContactsResult> callback = new NonEmptyResultCallback<>() {
                @Override
                public void success(@NonNull CountContactsResult result) {
                    resolveCall(call, result);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.countContacts(callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void createContact(PluginCall call) {
        try {
            if (getPermissionState(PERMISSION_READ_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_READ_CONTACTS, call, CALLBACK_READ_CONTACTS_PERMISSION);
                return;
            }
            if (getPermissionState(PERMISSION_WRITE_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_WRITE_CONTACTS, call, CALLBACK_WRITE_CONTACTS_PERMISSION);
                return;
            }

            CreateContactOptions options = new CreateContactOptions(call);
            NonEmptyResultCallback<CreateContactResult> callback = new NonEmptyResultCallback<>() {
                @Override
                public void success(@NonNull CreateContactResult result) {
                    resolveCall(call, result);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.createContact(options, callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void createGroup(PluginCall call) {
        rejectCallAsUnimplemented(call);
    }

    @PluginMethod
    public void deleteContactById(PluginCall call) {
        try {
            if (getPermissionState(PERMISSION_READ_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_READ_CONTACTS, call, CALLBACK_READ_CONTACTS_PERMISSION);
                return;
            }
            if (getPermissionState(PERMISSION_WRITE_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_WRITE_CONTACTS, call, CALLBACK_WRITE_CONTACTS_PERMISSION);
                return;
            }

            DeleteContactByIdOptions options = new DeleteContactByIdOptions(call);
            EmptyCallback callback = new EmptyCallback() {
                @Override
                public void success() {
                    resolveCall(call);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.deleteContactById(options, callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void deleteGroupById(PluginCall call) {
        rejectCallAsUnimplemented(call);
    }

    @PluginMethod
    public void displayContactById(PluginCall call) {
        try {
            DisplayContactByIdOptions options = new DisplayContactByIdOptions(call);

            assert implementation != null;
            Intent intent = implementation.displayContactById(options);
            getActivity().startActivity(intent);
            resolveCall(call);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void displayCreateContact(PluginCall call) {
        try {
            DisplayCreateContactOptions options = new DisplayCreateContactOptions(call);
            assert implementation != null;
            Intent intent = implementation.displayCreateContact(options);
            startActivityForResult(call, intent, "handleDisplayCreateContactCallback");
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void displayUpdateContactById(PluginCall call) {
        try {
            DisplayUpdateContactByIdOptions options = new DisplayUpdateContactByIdOptions(call);
            assert implementation != null;
            Intent intent = implementation.displayUpdateContactById(options);
            startActivityForResult(call, intent, "handleDisplayUpdateContactByIdCallback");
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void getAccounts(PluginCall call) {
        try {
            if (getPermissionState(PERMISSION_READ_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_READ_CONTACTS, call, CALLBACK_READ_CONTACTS_PERMISSION);
                return;
            }

            NonEmptyResultCallback<GetAccountsResult> callback = new NonEmptyResultCallback<>() {
                @Override
                public void success(@NonNull GetAccountsResult result) {
                    resolveCall(call, result);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.getAccounts(callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void getContactById(PluginCall call) {
        try {
            if (getPermissionState(PERMISSION_READ_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_READ_CONTACTS, call, CALLBACK_READ_CONTACTS_PERMISSION);
                return;
            }

            GetContactByIdOptions options = new GetContactByIdOptions(call);
            NonEmptyResultCallback<GetContactByIdResult> callback = new NonEmptyResultCallback<>() {
                @Override
                public void success(@NonNull GetContactByIdResult result) {
                    resolveCall(call, result);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.getContactById(options, callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void getContacts(PluginCall call) {
        try {
            if (getPermissionState(PERMISSION_READ_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_READ_CONTACTS, call, CALLBACK_READ_CONTACTS_PERMISSION);
                return;
            }

            GetContactsOptions options = new GetContactsOptions(call);
            NonEmptyResultCallback<GetContactsResult> callback = new NonEmptyResultCallback<>() {
                @Override
                public void success(@NonNull GetContactsResult result) {
                    resolveCall(call, result);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.getContacts(options, callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void getGroupById(PluginCall call) {
        rejectCallAsUnimplemented(call);
    }

    @PluginMethod
    public void getGroups(PluginCall call) {
        rejectCallAsUnimplemented(call);
    }

    @PluginMethod
    public void isAvailable(PluginCall call) {
        JSObject result = new JSObject();
        result.put("isAvailable", true);
        call.resolve(result);
    }

    @PluginMethod
    public void isSupported(PluginCall call) {
        JSObject result = new JSObject();
        result.put("isSupported", true);
        call.resolve(result);
    }

    @PluginMethod
    public void pickContact(PluginCall call) {
        pickContacts(call);
    }

    @PluginMethod
    public void pickContacts(PluginCall call) {
        try {
            assert implementation != null;
            Intent intent = implementation.pickContacts();
            startActivityForResult(call, intent, "handlePickContactsCallback");
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @PluginMethod
    public void updateContactById(PluginCall call) {
        try {
            if (getPermissionState(PERMISSION_READ_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_READ_CONTACTS, call, CALLBACK_READ_CONTACTS_PERMISSION);
                return;
            }
            if (getPermissionState(PERMISSION_WRITE_CONTACTS) != PermissionState.GRANTED) {
                requestPermissionForAlias(PERMISSION_WRITE_CONTACTS, call, CALLBACK_WRITE_CONTACTS_PERMISSION);
                return;
            }

            UpdateContactByIdOptions options = new UpdateContactByIdOptions(call);
            EmptyCallback callback = new EmptyCallback() {
                @Override
                public void success() {
                    resolveCall(call);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.updateContactById(options, callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    @Override
    @PluginMethod
    public void checkPermissions(PluginCall call) {
        super.checkPermissions(call);
    }

    @Override
    @PluginMethod
    public void requestPermissions(PluginCall call) {
        List<String> permissionsList = new ArrayList<>();
        permissionsList.add(PERMISSION_READ_CONTACTS);
        permissionsList.add(PERMISSION_WRITE_CONTACTS);

        JSArray permissions = call.getArray("permissions");
        if (permissions != null) {
            try {
                permissionsList = permissions.toList();
            } catch (JSONException e) {
                // No-op
            }
        }

        requestPermissionForAliases(permissionsList.toArray(new String[0]), call, CALLBACK_PERMISSIONS);
    }

    @PermissionCallback
    private void handlePermissionsCallback(PluginCall call) {
        this.checkPermissions(call);
    }

    @PermissionCallback
    private void handleReadContactsPermissionCallback(PluginCall call) {
        if (getPermissionState(PERMISSION_READ_CONTACTS) == PermissionState.GRANTED) {
            switch (call.getMethodName()) {
                case "countContacts" -> countContacts(call);
                case "createContact" -> createContact(call);
                case "deleteContactById" -> deleteContactById(call);
                case "getContactById" -> getContactById(call);
                case "getContacts" -> getContacts(call);
                case "getAccounts" -> getAccounts(call);
                case "updateContactById" -> updateContactById(call);
            }
        } else {
            rejectCall(call, new Exception(ERROR_READ_CONTACTS_PERMISSION_DENIED));
        }
    }

    @PermissionCallback
    private void handleWriteContactsPermissionCallback(PluginCall call) {
        if (getPermissionState(PERMISSION_WRITE_CONTACTS) == PermissionState.GRANTED) {
            switch (call.getMethodName()) {
                case "createContact" -> createContact(call);
                case "deleteContactById" -> deleteContactById(call);
                case "updateContactById" -> updateContactById(call);
            }
        } else {
            rejectCall(call, new Exception(ERROR_WRITE_CONTACTS_PERMISSION_DENIED));
        }
    }

    @ActivityCallback
    private void handleDisplayCreateContactCallback(@Nullable PluginCall call, ActivityResult result) {
        if (call == null) {
            return;
        }
        if (result.getResultCode() == RESULT_OK) {
            Intent data = result.getData();
            String contactId = null;

            if (data != null && data.getData() != null) {
                try {
                    ContentResolver cr = getContext().getContentResolver();
                    Uri contactUri = ContactsContract.Contacts.lookupContact(cr, data.getData());

                    if (contactUri != null) {
                        long id = ContentUris.parseId(contactUri);
                        contactId = String.valueOf(id);
                    }
                } catch (Exception exception) {
                    resolveCall(call, new DisplayCreateContactResult(null));
                    return;
                }
            }

            resolveCall(call, new DisplayCreateContactResult(contactId));
        } else {
            rejectCall(call, new Exception(ERROR_DISPLAY_CREATE_CONTACT_CANCELLED));
        }
    }

    @ActivityCallback
    private void handleDisplayUpdateContactByIdCallback(@Nullable PluginCall call, ActivityResult result) {
        if (call == null) {
            return;
        }

        if (result.getResultCode() == RESULT_CANCELED) {
            rejectCall(call, new Exception(ContactsPlugin.ERROR_DISPLAY_UPDATE_CONTACT_BY_ID_CANCELLED));
            return;
        }

        resolveCall(call);
    }

    @ActivityCallback
    private void handlePickContactsCallback(@Nullable PluginCall call, ActivityResult result) {
        if (call == null) {
            return;
        }

        Intent intent = result.getData();
        Uri uri = (intent != null) ? intent.getData() : null;

        if (uri == null) {
            resolveCall(call, new PickContactsResult(new ArrayList<>()));
            return;
        }

        String contactId = null;
        String[] projection = new String[] { ContactsContract.Contacts._ID };

        try (Cursor cursor = getContext().getContentResolver().query(uri, projection, null, null, null)) {
            if (cursor != null && cursor.moveToFirst()) {
                contactId = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.Contacts._ID));
            }
        }

        if (contactId == null) {
            resolveCall(call, new PickContactsResult(new ArrayList<>()));
            return;
        }

        try {
            GetContactByIdOptions options = new GetContactByIdOptions(contactId, call);
            NonEmptyResultCallback<GetContactByIdResult> callback = new NonEmptyResultCallback<>() {
                @Override
                public void success(@NonNull GetContactByIdResult result) {
                    PickContactsResult pickContactsResult = new PickContactsResult(Collections.singletonList(result.getContact()));
                    resolveCall(call, pickContactsResult);
                }

                @Override
                public void error(@NonNull Exception exception) {
                    rejectCall(call, exception);
                }
            };

            assert implementation != null;
            implementation.getContactById(options, callback);
        } catch (Exception exception) {
            rejectCall(call, exception);
        }
    }

    private void rejectCall(@NonNull PluginCall call, @NonNull Exception exception) {
        String message = exception.getMessage();
        if (message == null) {
            message = ERROR_UNKNOWN_ERROR;
        }
        Logger.error(TAG, message, exception);
        call.reject(message);
    }

    private void rejectCallAsUnimplemented(@NonNull PluginCall call) {
        call.unimplemented("Not implemented on this platform.");
    }

    private void resolveCall(@NonNull PluginCall call) {
        call.resolve();
    }

    private void resolveCall(@NonNull PluginCall call, @Nullable Result result) {
        if (result == null) {
            call.resolve();
        } else {
            call.resolve(result.toJSObject());
        }
    }
}
