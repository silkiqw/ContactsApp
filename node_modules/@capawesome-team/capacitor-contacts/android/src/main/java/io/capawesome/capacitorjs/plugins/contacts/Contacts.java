package io.capawesome.capacitorjs.plugins.contacts;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.provider.ContactsContract;
import android.util.Base64;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.capawesome.capacitorjs.plugins.contacts.classes.Contact;
import io.capawesome.capacitorjs.plugins.contacts.classes.ContactsQuery;
import io.capawesome.capacitorjs.plugins.contacts.classes.EmailAddress;
import io.capawesome.capacitorjs.plugins.contacts.classes.PhoneNumber;
import io.capawesome.capacitorjs.plugins.contacts.classes.PostalAddress;
import io.capawesome.capacitorjs.plugins.contacts.classes.UrlAddress;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.CreateContactOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DeleteContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DisplayContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DisplayCreateContactOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.DisplayUpdateContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.GetContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.GetContactsOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.options.UpdateContactByIdOptions;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.CountContactsResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.CreateContactResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.GetAccountsResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.GetContactByIdResult;
import io.capawesome.capacitorjs.plugins.contacts.classes.results.GetContactsResult;
import io.capawesome.capacitorjs.plugins.contacts.enums.ContactField;
import io.capawesome.capacitorjs.plugins.contacts.interfaces.EmptyCallback;
import io.capawesome.capacitorjs.plugins.contacts.interfaces.NonEmptyResultCallback;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Contacts {

    @NonNull
    private final ContactsPlugin plugin;

    public Contacts(@NonNull ContactsPlugin plugin) {
        this.plugin = plugin;
    }

    public void countContacts(@NonNull NonEmptyResultCallback<CountContactsResult> callback) {
        int total = 0;
        Uri uri = ContactsContract.Contacts.CONTENT_URI;
        String[] projection = new String[] { ContactsContract.Contacts._ID };

        try (Cursor cursor = plugin.getContext().getContentResolver().query(uri, projection, null, null, null)) {
            if (cursor != null) {
                total = cursor.getCount();
                callback.success(new CountContactsResult(total));
            }
        } catch (Exception exception) {
            callback.error(exception);
        }
    }

    public void createContact(@NonNull CreateContactOptions options, @NonNull NonEmptyResultCallback<CreateContactResult> callback)
        throws Exception {
        Contact contact = options.getContact();

        io.capawesome.capacitorjs.plugins.contacts.classes.Account account = contact.getAccount();
        String birthday = contact.getBirthday() != null ? contact.getBirthday().getValue() : null;
        ArrayList<EmailAddress> emailAddresses = contact.getEmailAddresses();
        String familyName = contact.getFamilyName();
        String givenName = contact.getGivenName();
        String jobTitle = contact.getJobTitle();
        String middleName = contact.getMiddleName();
        String namePrefix = contact.getNamePrefix();
        String nameSuffix = contact.getNameSuffix();
        String note = contact.getNote();
        String organizationName = contact.getOrganizationName();
        ArrayList<PhoneNumber> phoneNumbers = contact.getPhoneNumbers();
        String photo = contact.getPhoto();
        ArrayList<PostalAddress> postalAddresses = contact.getPostalAddresses();
        ArrayList<UrlAddress> urlAddresses = contact.getUrlAddresses();

        ArrayList<ContentProviderOperation> contentProviderOperationList = new ArrayList<>();

        ContentProviderOperation.Builder contentProviderOperationBuilder = ContentProviderOperation.newInsert(
            ContactsContract.RawContacts.CONTENT_URI
        )
            .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, account != null ? account.type : null)
            .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, account != null ? account.name : null);
        contentProviderOperationList.add(contentProviderOperationBuilder.build());
        // Birthday
        contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
            .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE)
            .withValue(ContactsContract.CommonDataKinds.Event.TYPE, ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY)
            .withValue(ContactsContract.CommonDataKinds.Event.START_DATE, birthday);
        contentProviderOperationList.add(contentProviderOperationBuilder.build());
        // Names
        contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
            .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
            .withValue(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, familyName)
            .withValue(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, givenName)
            .withValue(ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME, middleName)
            .withValue(ContactsContract.CommonDataKinds.StructuredName.PREFIX, namePrefix)
            .withValue(ContactsContract.CommonDataKinds.StructuredName.SUFFIX, nameSuffix);
        contentProviderOperationList.add(contentProviderOperationBuilder.build());
        // Note
        contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
            .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE)
            .withValue(ContactsContract.CommonDataKinds.Note.NOTE, note);
        contentProviderOperationList.add(contentProviderOperationBuilder.build());
        // Organization
        contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
            .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE)
            .withValue(ContactsContract.CommonDataKinds.Organization.COMPANY, organizationName)
            .withValue(ContactsContract.CommonDataKinds.Organization.TITLE, jobTitle);
        contentProviderOperationList.add(contentProviderOperationBuilder.build());
        // Photo
        if (photo != null) {
            // Remove data url prefix
            photo = photo.replaceFirst("data:image/.*;base64,", "");
            // Convert base64 string to byte array
            byte[] photoBytes = Base64.decode(photo, Base64.DEFAULT);

            contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Photo.PHOTO, photoBytes);
            contentProviderOperationList.add(contentProviderOperationBuilder.build());
        }
        // Email addresses
        if (emailAddresses != null) {
            for (EmailAddress emailAddress : emailAddresses) {
                contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.Email.IS_PRIMARY, emailAddress.getIsPrimary())
                    .withValue(ContactsContract.CommonDataKinds.Email.LABEL, emailAddress.getLabel())
                    .withValue(ContactsContract.CommonDataKinds.Email.TYPE, emailAddress.getType().toInt())
                    .withValue(ContactsContract.CommonDataKinds.Email.ADDRESS, emailAddress.getValue());
                contentProviderOperationList.add(contentProviderOperationBuilder.build());
            }
        }
        // Phone numbers
        if (phoneNumbers != null) {
            for (PhoneNumber phoneNumber : phoneNumbers) {
                contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.Phone.IS_PRIMARY, phoneNumber.getIsPrimary())
                    .withValue(ContactsContract.CommonDataKinds.Phone.LABEL, phoneNumber.getLabel())
                    .withValue(ContactsContract.CommonDataKinds.Phone.TYPE, phoneNumber.getType().toInt())
                    .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phoneNumber.getValue());
                contentProviderOperationList.add(contentProviderOperationBuilder.build());
            }
        }
        // Postal addresses
        if (postalAddresses != null) {
            for (PostalAddress postalAddress : postalAddresses) {
                contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.CITY, postalAddress.getCity())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY, postalAddress.getCountry())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.IS_PRIMARY, postalAddress.getIsPrimary())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.LABEL, postalAddress.getLabel())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.NEIGHBORHOOD, postalAddress.getNeighborhood())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE, postalAddress.getPostalCode())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.REGION, postalAddress.getState())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.STREET, postalAddress.getStreet())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.TYPE, postalAddress.getType().toInt());
                contentProviderOperationList.add(contentProviderOperationBuilder.build());
            }
        }
        // Url addresses
        if (urlAddresses != null) {
            for (UrlAddress urlAddress : urlAddresses) {
                contentProviderOperationBuilder = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.Website.URL, urlAddress.getValue())
                    .withValue(ContactsContract.CommonDataKinds.Website.TYPE, urlAddress.getType())
                    .withValue(ContactsContract.CommonDataKinds.Website.LABEL, urlAddress.getLabel());
                contentProviderOperationList.add(contentProviderOperationBuilder.build());
            }
        }

        ContentResolver contentResolver = plugin.getActivity().getContentResolver();
        ContentProviderResult[] contentProviderResult = contentResolver.applyBatch(
            ContactsContract.AUTHORITY,
            contentProviderOperationList
        );
        if (contentProviderResult.length == 0) {
            callback.error(new Exception(ContactsPlugin.ERROR_UNKNOWN_ERROR));
            return;
        }
        assert contentProviderResult[0].uri != null;
        long rawContactId = ContentUris.parseId(contentProviderResult[0].uri);
        String contactId = getContactIdByRawId(String.valueOf(rawContactId));
        if (contactId == null) {
            callback.error(new Exception(ContactsPlugin.ERROR_UNKNOWN_ERROR));
            return;
        }
        CreateContactResult result = new CreateContactResult(contactId);
        callback.success(result);
    }

    public void deleteContactById(@NonNull DeleteContactByIdOptions options, @NonNull EmptyCallback callback) throws Exception {
        String id = options.getId();

        String selection = ContactsContract.RawContacts.CONTACT_ID + " = ?";
        String[] selectionArgs = new String[] { id };

        ContentResolver cr = this.plugin.getActivity().getContentResolver();
        Cursor cursor = cr.query(ContactsContract.RawContacts.CONTENT_URI, null, selection, selectionArgs, null);

        if (cursor != null && cursor.getCount() > 0) {
            while (cursor.moveToNext()) {
                int columnIndex = cursor.getColumnIndex(ContactsContract.RawContacts._ID);
                if (columnIndex < 0) {
                    continue;
                }
                String rawContactId = cursor.getString(columnIndex);
                cr.delete(
                    ContactsContract.RawContacts.CONTENT_URI,
                    ContactsContract.RawContacts._ID + " = ?",
                    new String[] { rawContactId }
                );
            }
            cursor.close();
        } else {
            if (cursor != null) {
                cursor.close();
            }
            callback.error(new Exception(ContactsPlugin.ERROR_CONTACT_NOT_FOUND));
            return;
        }

        callback.success();
    }

    public Intent displayContactById(@NonNull DisplayContactByIdOptions options) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_URI, options.getId());
        intent.setData(uri);
        return intent;
    }

    public void getAccounts(@NonNull NonEmptyResultCallback<GetAccountsResult> callback) {
        final AccountManager accountManager = AccountManager.get(plugin.getContext());
        Account[] accounts = accountManager.getAccounts();
        final ArrayList<Account> accountsList = new ArrayList<>(Arrays.asList(accounts));

        callback.success(new GetAccountsResult(accountsList));
    }

    public void getContactById(@NonNull GetContactByIdOptions options, @NonNull NonEmptyResultCallback<GetContactByIdResult> callback) {
        List<ContactField> fields = options.getFields();
        String id = options.getId();

        Contact contact = getContactById(id, fields);

        GetContactByIdResult result = new GetContactByIdResult(contact);
        callback.success(result);
    }

    public void getContacts(@NonNull GetContactsOptions options, @NonNull NonEmptyResultCallback<GetContactsResult> callback) {
        List<ContactField> fields = options.getFields();
        Integer limit = options.getLimit();
        Integer offset = options.getOffset();

        List<Contact> contacts = getContacts(fields, limit, offset);

        GetContactsResult result = new GetContactsResult(contacts);
        callback.success(result);
    }

    public Intent displayCreateContact(@NonNull DisplayCreateContactOptions options) {
        Contact contact = options.getContact();

        Intent intent = new Intent(ContactsContract.Intents.Insert.ACTION);
        intent.setType(ContactsContract.RawContacts.CONTENT_TYPE);

        if (contact == null) {
            return intent;
        }

        io.capawesome.capacitorjs.plugins.contacts.classes.Account account = contact.getAccount();
        String birthday = contact.getBirthday() != null ? contact.getBirthday().getValue() : null;
        String familyName = contact.getFamilyName();
        String givenName = contact.getGivenName();
        String middleName = contact.getMiddleName();
        String namePrefix = contact.getNamePrefix();
        String nameSuffix = contact.getNameSuffix();
        String organizationName = contact.getOrganizationName();
        String jobTitle = contact.getJobTitle();
        ArrayList<PhoneNumber> phoneNumbers = contact.getPhoneNumbers();
        ArrayList<EmailAddress> emailAddresses = contact.getEmailAddresses();
        ArrayList<PostalAddress> postalAddresses = contact.getPostalAddresses();
        ArrayList<UrlAddress> urlAddresses = contact.getUrlAddresses();
        String photo = contact.getPhoto();
        String note = contact.getNote();

        if (familyName != null || givenName != null || middleName != null || namePrefix != null || nameSuffix != null) {
            String name = "";
            if (namePrefix != null) {
                name += namePrefix + " ";
            }
            if (givenName != null) {
                name += givenName + " ";
            }
            if (middleName != null) {
                name += middleName + " ";
            }
            if (familyName != null) {
                name += familyName + " ";
            }
            if (nameSuffix != null) {
                name += nameSuffix + " ";
            }
            intent.putExtra(ContactsContract.Intents.Insert.NAME, name.trim());
        }
        if (organizationName != null) {
            intent.putExtra(ContactsContract.Intents.Insert.COMPANY, organizationName);
        }
        if (jobTitle != null) {
            intent.putExtra(ContactsContract.Intents.Insert.JOB_TITLE, jobTitle);
        }

        ArrayList<ContentValues> contactData = new ArrayList<>();

        ContentValues structuredNameRow = new ContentValues();
        structuredNameRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);
        structuredNameRow.put(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, familyName);
        structuredNameRow.put(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, givenName);
        structuredNameRow.put(ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME, middleName);
        structuredNameRow.put(ContactsContract.CommonDataKinds.StructuredName.PREFIX, namePrefix);
        structuredNameRow.put(ContactsContract.CommonDataKinds.StructuredName.SUFFIX, nameSuffix);
        contactData.add(structuredNameRow);

        if (account != null) {
            ContentValues accountRow = new ContentValues();
            accountRow.put(ContactsContract.RawContacts.ACCOUNT_NAME, account.name);
            accountRow.put(ContactsContract.RawContacts.ACCOUNT_TYPE, account.name);
            contactData.add(accountRow);
        }

        if (birthday != null) {
            ContentValues birthdayRow = new ContentValues();
            birthdayRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE);
            birthdayRow.put(ContactsContract.CommonDataKinds.Event.TYPE, ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY);
            birthdayRow.put(ContactsContract.CommonDataKinds.Event.START_DATE, birthday);
            contactData.add(birthdayRow);
        }

        if (note != null) {
            ContentValues noteRow = new ContentValues();
            noteRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE);
            noteRow.put(ContactsContract.CommonDataKinds.Note.NOTE, note);
            contactData.add(noteRow);
        }
        if (photo != null) {
            photo = photo.replaceFirst("data:image/.*;base64,", "");
            byte[] photoBytes = Base64.decode(photo, Base64.DEFAULT);

            ContentValues photoRow = new ContentValues();
            photoRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE);
            photoRow.put(ContactsContract.CommonDataKinds.Photo.PHOTO, photoBytes);
            contactData.add(photoRow);
        }
        if (phoneNumbers != null) {
            for (PhoneNumber phoneNumber : phoneNumbers) {
                ContentValues phoneRow = new ContentValues();
                phoneRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);
                phoneRow.put(ContactsContract.CommonDataKinds.Phone.IS_PRIMARY, phoneNumber.getIsPrimary());
                phoneRow.put(ContactsContract.CommonDataKinds.Phone.LABEL, phoneNumber.getLabel());
                phoneRow.put(ContactsContract.CommonDataKinds.Phone.TYPE, phoneNumber.getType().toInt());
                phoneRow.put(ContactsContract.CommonDataKinds.Phone.NUMBER, phoneNumber.getValue());
                contactData.add(phoneRow);
            }
        }
        if (emailAddresses != null) {
            for (EmailAddress emailAddress : emailAddresses) {
                ContentValues emailRow = new ContentValues();
                emailRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE);
                emailRow.put(ContactsContract.CommonDataKinds.Email.IS_PRIMARY, emailAddress.getIsPrimary());
                emailRow.put(ContactsContract.CommonDataKinds.Email.LABEL, emailAddress.getLabel());
                emailRow.put(ContactsContract.CommonDataKinds.Email.TYPE, emailAddress.getType().toInt());
                emailRow.put(ContactsContract.CommonDataKinds.Email.ADDRESS, emailAddress.getValue());
                contactData.add(emailRow);
            }
        }
        if (postalAddresses != null) {
            for (PostalAddress postalAddress : postalAddresses) {
                ContentValues postalAddressRow = new ContentValues();
                postalAddressRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE);
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS, postalAddress.getFormatted());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.CITY, postalAddress.getCity());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY, postalAddress.getCountry());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.IS_PRIMARY, postalAddress.getIsPrimary());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.LABEL, postalAddress.getLabel());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.NEIGHBORHOOD, postalAddress.getNeighborhood());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE, postalAddress.getPostalCode());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.REGION, postalAddress.getState());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.STREET, postalAddress.getStreet());
                postalAddressRow.put(ContactsContract.CommonDataKinds.StructuredPostal.TYPE, postalAddress.getType().toInt());
                contactData.add(postalAddressRow);
            }
        }
        if (urlAddresses != null) {
            for (UrlAddress urlAddress : urlAddresses) {
                ContentValues urlAddressRow = new ContentValues();
                urlAddressRow.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE);
                urlAddressRow.put(ContactsContract.CommonDataKinds.Website.URL, urlAddress.getValue());
                urlAddressRow.put(ContactsContract.CommonDataKinds.Website.TYPE, urlAddress.getType());
                urlAddressRow.put(ContactsContract.CommonDataKinds.Website.LABEL, urlAddress.getLabel());
                contactData.add(urlAddressRow);
            }
        }

        intent.putParcelableArrayListExtra(ContactsContract.Intents.Insert.DATA, contactData);

        return intent;
    }

    public Intent displayUpdateContactById(@NonNull DisplayUpdateContactByIdOptions options) {
        Uri contactUri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, options.getId());
        Intent intent = new Intent(Intent.ACTION_EDIT);
        intent.setDataAndType(contactUri, ContactsContract.Contacts.CONTENT_ITEM_TYPE);
        intent.putExtra("finishActivityOnSaveCompleted", true);
        return intent;
    }

    public Intent pickContacts() {
        return new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
    }

    public void updateContactById(UpdateContactByIdOptions options, EmptyCallback callback) {
        long id = options.getId();
        Contact contact = options.getContact();

        ArrayList<ContentProviderOperation> contentProviderOperationList = new ArrayList<>();
        // Birthday
        String birthday = contact.getBirthday() == null ? null : contact.getBirthday().getValue();
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        contentProviderOperationList.add(
            ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Event.TYPE, ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY)
                .withValue(ContactsContract.CommonDataKinds.Event.START_DATE, birthday)
                .build()
        );
        // Names
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        contentProviderOperationList.add(
            ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, contact.getFamilyName())
                .withValue(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, contact.getGivenName())
                .withValue(ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME, contact.getMiddleName())
                .withValue(ContactsContract.CommonDataKinds.StructuredName.PREFIX, contact.getNamePrefix())
                .withValue(ContactsContract.CommonDataKinds.StructuredName.SUFFIX, contact.getNameSuffix())
                .build()
        );
        // Note
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        contentProviderOperationList.add(
            ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Note.NOTE, contact.getNote())
                .build()
        );
        // Organization
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        contentProviderOperationList.add(
            ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Organization.COMPANY, contact.getOrganizationName())
                .withValue(ContactsContract.CommonDataKinds.Organization.TITLE, contact.getJobTitle())
                .build()
        );
        // Photo
        String photo = contact.getPhoto();
        byte[] photoBytes = null;
        if (photo != null && !photo.isEmpty()) {
            photo = photo.replaceFirst("data:image/.*;base64,", "");
            photoBytes = Base64.decode(photo, Base64.DEFAULT);
        }
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        contentProviderOperationList.add(
            ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Photo.PHOTO, photoBytes)
                .build()
        );
        // Email addresses
        List<EmailAddress> emailAddresses = contact.getEmailAddresses() == null ? new ArrayList<>() : contact.getEmailAddresses();
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        for (EmailAddress emailAddress : emailAddresses) {
            contentProviderOperationList.add(
                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.Email.ADDRESS, emailAddress.getValue())
                    .withValue(ContactsContract.CommonDataKinds.Email.IS_PRIMARY, emailAddress.getIsPrimary())
                    .withValue(ContactsContract.CommonDataKinds.Email.LABEL, emailAddress.getLabel())
                    .withValue(ContactsContract.CommonDataKinds.Email.TYPE, emailAddress.getType().toInt())
                    .build()
            );
        }
        // Phone numbers
        List<PhoneNumber> phoneNumbers = contact.getPhoneNumbers() == null ? new ArrayList<>() : contact.getPhoneNumbers();
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        for (PhoneNumber phoneNumber : phoneNumbers) {
            contentProviderOperationList.add(
                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phoneNumber.getValue())
                    .withValue(ContactsContract.CommonDataKinds.Phone.IS_PRIMARY, phoneNumber.getIsPrimary())
                    .withValue(ContactsContract.CommonDataKinds.Phone.LABEL, phoneNumber.getLabel())
                    .withValue(ContactsContract.CommonDataKinds.Phone.TYPE, phoneNumber.getType().toInt())
                    .build()
            );
        }
        // Postal addresses
        List<PostalAddress> postalAddresses = contact.getPostalAddresses() == null ? new ArrayList<>() : contact.getPostalAddresses();
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        for (PostalAddress postalAddress : postalAddresses) {
            contentProviderOperationList.add(
                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.CITY, postalAddress.getCity())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY, postalAddress.getCountry())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.IS_PRIMARY, postalAddress.getIsPrimary())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.LABEL, postalAddress.getLabel())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.NEIGHBORHOOD, postalAddress.getNeighborhood())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE, postalAddress.getPostalCode())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.REGION, postalAddress.getState())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.STREET, postalAddress.getStreet())
                    .withValue(ContactsContract.CommonDataKinds.StructuredPostal.TYPE, postalAddress.getType().toInt())
                    .build()
            );
        }
        // Url addresses
        List<UrlAddress> urlAddresses = contact.getUrlAddresses() == null ? new ArrayList<>() : contact.getUrlAddresses();
        contentProviderOperationList.add(
            ContentProviderOperation.newDelete(ContactsContract.Data.CONTENT_URI)
                .withSelection(
                    ContactsContract.Data.CONTACT_ID + "=? AND " + ContactsContract.Data.MIMETYPE + "=?",
                    new String[] { id + "", ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE }
                )
                .build()
        );
        for (UrlAddress urlAddress : urlAddresses) {
            contentProviderOperationList.add(
                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValue(ContactsContract.Data.RAW_CONTACT_ID, id)
                    .withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE)
                    .withValue(ContactsContract.CommonDataKinds.Website.URL, urlAddress.getValue())
                    .build()
            );
        }

        Context context = plugin.getContext();
        try {
            context.getContentResolver().applyBatch(ContactsContract.AUTHORITY, contentProviderOperationList);
            callback.success();
        } catch (Exception exception) {
            callback.error(exception);
        }
    }

    @Nullable
    private Contact getContactById(@NonNull String id, @NonNull List<ContactField> fields) {
        ContactsQuery contactQuery = new ContactsQuery(id, fields);

        ContentResolver cr = this.plugin.getActivity().getContentResolver();
        Cursor cursor = cr.query(
            ContactsContract.Data.CONTENT_URI,
            contactQuery.getProjection(),
            contactQuery.getSelection(),
            contactQuery.getSelectionArgs(),
            null
        );

        if (cursor != null && cursor.getCount() > 0) {
            Contact contact = new Contact();

            while (cursor.moveToNext()) {
                contact.setPropertiesFromCursor(cursor, fields);
            }
            cursor.close();

            return contact;
        }

        if (cursor != null) {
            cursor.close();
        }

        return null;
    }

    @Nullable
    private String getContactIdByRawId(@NonNull String contactRawId) {
        Cursor cursor = plugin
            .getActivity()
            .getContentResolver()
            .query(
                ContactsContract.RawContacts.CONTENT_URI,
                new String[] { ContactsContract.RawContacts.CONTACT_ID },
                ContactsContract.RawContacts._ID + " = ?",
                new String[] { contactRawId },
                null
            );
        if (cursor == null) {
            return null;
        }
        String contactId = null;
        if (cursor.moveToNext()) {
            int index = cursor.getColumnIndex(ContactsContract.RawContacts.CONTACT_ID);
            if (index >= 0) {
                contactId = cursor.getString(index);
            }
        }
        cursor.close();
        return contactId;
    }

    @NonNull
    private List<Contact> getContacts(@NonNull List<ContactField> fields, @NonNull Integer limit, @NonNull Integer offset) {
        ContactsQuery contactQuery = new ContactsQuery(null, fields);
        HashMap<String, Contact> contactsMap = new HashMap<>();

        ContentResolver cr = this.plugin.getActivity().getContentResolver();

        Cursor cursor = cr.query(
            ContactsContract.Data.CONTENT_URI,
            contactQuery.getProjection(),
            contactQuery.getSelection(),
            contactQuery.getSelectionArgs(),
            ContactsContract.Data.CONTACT_ID + " ASC"
        );

        Set<String> skippedContactIds = new HashSet<>();
        int index = 0;

        if (cursor != null && cursor.getCount() > 0) {
            while (cursor.moveToNext()) {
                int columnIndex = cursor.getColumnIndex(ContactsContract.Data.CONTACT_ID);
                if (columnIndex < 0) {
                    continue;
                }
                String contactId = cursor.getString(columnIndex);

                Contact contact;
                if (contactsMap.containsKey(contactId)) {
                    contact = contactsMap.get(contactId);
                } else {
                    if (skippedContactIds.contains(contactId)) {
                        continue;
                    }
                    if (index < offset) {
                        index++;
                        skippedContactIds.add(contactId);
                        continue;
                    }
                    if (contactsMap.size() >= limit) {
                        break;
                    }

                    contact = new Contact();
                    contactsMap.put(contactId, contact);
                }
                assert contact != null;
                contact.setPropertiesFromCursor(cursor, fields);
            }
            cursor.close();
        }

        if (cursor != null) {
            cursor.close();
        }

        return new ArrayList<>(contactsMap.values());
    }
}
