package io.capawesome.capacitorjs.plugins.contacts.classes;

import android.provider.ContactsContract;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.capawesome.capacitorjs.plugins.contacts.enums.ContactField;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ContactsQuery {

    @Nullable
    private final String[] projection;

    @Nullable
    private final String selection;

    @Nullable
    private final String[] selectionArgs;

    public ContactsQuery(@Nullable final String contactId, @NonNull final List<ContactField> fields) {
        ArrayList<String> projection = new ArrayList<>();
        projection.add(ContactsContract.Data._ID);
        projection.add(ContactsContract.Data.MIMETYPE);

        ArrayList<String> mimeTypes = new ArrayList<>();
        boolean hasBirthdayField = false;

        for (ContactField field : fields) {
            String[] columns = field.getProjectionColumns();
            if (columns != null) {
                Collections.addAll(projection, columns);
            }

            String mimeType = field.getMimeType();
            if (mimeType != null && !mimeTypes.contains(mimeType)) {
                mimeTypes.add(mimeType);
            }

            if (field == ContactField.BIRTHDAY) {
                hasBirthdayField = true;
            }
        }

        String selection = null;
        String[] selectionArgs = null;

        if (!mimeTypes.isEmpty()) {
            StringBuilder selectionBuilder = new StringBuilder();

            if (contactId != null) {
                selectionBuilder.append(ContactsContract.Data.CONTACT_ID).append(" = ? AND ");
            }

            selectionBuilder.append("(");
            selectionBuilder.append(ContactsContract.Data.MIMETYPE).append(" IN (");
            for (int i = 0; i < mimeTypes.size(); i++) {
                selectionBuilder.append("?");
                if (i < mimeTypes.size() - 1) selectionBuilder.append(", ");
            }
            selectionBuilder.append(")");

            if (hasBirthdayField) {
                selectionBuilder
                    .append(" AND (")
                    .append(ContactsContract.Data.MIMETYPE)
                    .append(" != ? OR (")
                    .append(ContactsContract.Data.MIMETYPE)
                    .append(" = ? AND ")
                    .append(ContactsContract.CommonDataKinds.Event.TYPE)
                    .append(" = ?))");
            }

            selectionBuilder.append(")");

            int baseArgs = mimeTypes.size();
            int extraArgs = hasBirthdayField ? 3 : 0;
            int totalArgs = (contactId != null ? 1 : 0) + baseArgs + extraArgs;

            selectionArgs = new String[totalArgs];
            int index = 0;

            if (contactId != null) {
                selectionArgs[index++] = contactId;
            }

            for (String mime : mimeTypes) {
                selectionArgs[index++] = mime;
            }

            if (hasBirthdayField) {
                String eventMime = ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE;
                selectionArgs[index++] = eventMime;
                selectionArgs[index++] = eventMime;
                selectionArgs[index] = String.valueOf(ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY);
            }

            selection = selectionBuilder.toString();
        }

        this.projection = projection.toArray(new String[0]);
        this.selection = selection;
        this.selectionArgs = selectionArgs;
    }

    @Nullable
    public String[] getProjection() {
        return projection;
    }

    @Nullable
    public String getSelection() {
        return selection;
    }

    @Nullable
    public String[] getSelectionArgs() {
        return selectionArgs;
    }
}
