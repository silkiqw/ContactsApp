package io.capawesome.capacitorjs.plugins.contacts.classes;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.getcapacitor.JSObject;
import io.capawesome.capacitorjs.plugins.contacts.ContactsPlugin;
import io.capawesome.capacitorjs.plugins.contacts.enums.PostalAddressType;
import java.util.Objects;
import org.json.JSONObject;

public class PostalAddress {

    @Nullable
    private String city;

    @Nullable
    private String country;

    @Nullable
    private String formatted;

    private boolean isPrimary;

    @Nullable
    private String label;

    @Nullable
    private String neighborhood;

    @Nullable
    private String postalCode;

    @Nullable
    private String state;

    @Nullable
    private String street;

    @NonNull
    private final PostalAddressType type;

    public PostalAddress(@NonNull PostalAddressType type) {
        this.isPrimary = false;
        this.type = type;
    }

    public PostalAddress(@NonNull JSObject data) throws Exception {
        this.city = data.getString("city");
        this.country = data.getString("country");
        this.formatted = data.getString("formatted");
        this.isPrimary = Boolean.TRUE.equals(data.getBoolean("isPrimary", false));
        this.label = data.getString("label");
        this.neighborhood = data.getString("neighborhood");
        this.postalCode = data.getString("postalCode");
        this.state = data.getString("state");
        this.street = data.getString("street");
        this.type = getTypeFromJSObject(data);
    }

    public static PostalAddress fromJSONObject(JSONObject data) throws Exception {
        return new PostalAddress(JSObject.fromJSONObject(data));
    }

    @Nullable
    public String getCity() {
        return city;
    }

    @Nullable
    public String getCountry() {
        return country;
    }

    @Nullable
    public String getFormatted() {
        if (formatted != null) {
            return formatted;
        }
        // If formatted is not set, we will build it from the other fields.
        // Otherwise, the postal address might get ignored by Android when saving the contact.
        StringBuilder result = new StringBuilder();
        if (street != null) {
            result.append(street);
        }
        if (neighborhood != null) {
            if (result.length() > 0) {
                result.append(", ");
            }
            result.append(neighborhood);
        }
        if (city != null) {
            if (result.length() > 0) {
                result.append(", ");
            }
            result.append(city);
        }
        if (state != null) {
            if (result.length() > 0) {
                result.append(", ");
            }
            result.append(state);
        }
        if (postalCode != null) {
            if (result.length() > 0) {
                result.append(", ");
            }
            result.append(postalCode);
        }
        if (country != null) {
            if (result.length() > 0) {
                result.append(", ");
            }
            result.append(country);
        }
        if (result.length() == 0) {
            return null;
        }
        return result.toString();
    }

    public boolean getIsPrimary() {
        return isPrimary;
    }

    @Nullable
    public String getLabel() {
        return label;
    }

    @Nullable
    public String getNeighborhood() {
        return neighborhood;
    }

    @Nullable
    public String getPostalCode() {
        return postalCode;
    }

    @Nullable
    public String getState() {
        return state;
    }

    @Nullable
    public String getStreet() {
        return street;
    }

    @NonNull
    public PostalAddressType getType() {
        return type;
    }

    public void setCity(@Nullable String city) {
        this.city = city;
    }

    public void setCountry(@Nullable String country) {
        this.country = country;
    }

    public void setFormatted(@Nullable String formatted) {
        this.formatted = formatted;
    }

    public void setIsPrimary(@Nullable Boolean isPrimary) {
        this.isPrimary = Objects.requireNonNullElse(isPrimary, false);
    }

    public void setLabel(@Nullable String label) {
        this.label = label;
    }

    public void setNeighborhood(@Nullable String neighborhood) {
        this.neighborhood = neighborhood;
    }

    public void setPostalCode(@Nullable String postalCode) {
        this.postalCode = postalCode;
    }

    public void setState(@Nullable String state) {
        this.state = state;
    }

    public void setStreet(@Nullable String street) {
        this.street = street;
    }

    @NonNull
    public JSObject toJSObject() {
        JSObject result = new JSObject();
        result.put("city", city);
        result.put("country", country);
        result.put("formatted", formatted);
        result.put("isPrimary", isPrimary);
        result.put("label", label);
        result.put("neighborhood", neighborhood);
        result.put("postalCode", postalCode);
        result.put("state", state);
        result.put("street", street);
        result.put("type", type == null ? null : type.toString());
        return result;
    }

    @NonNull
    private PostalAddressType getTypeFromJSObject(@NonNull JSObject data) throws Exception {
        String typeAsString = data.getString("type");
        if (typeAsString == null) {
            return PostalAddressType.OTHER;
        }
        PostalAddressType type = PostalAddressType.fromString(typeAsString);
        if (type == null) {
            throw new Exception(ContactsPlugin.ERROR_TYPE_INVALID);
        }
        return type;
    }
}
