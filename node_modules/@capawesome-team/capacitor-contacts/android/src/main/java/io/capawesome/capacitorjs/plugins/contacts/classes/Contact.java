package io.capawesome.capacitorjs.plugins.contacts.classes;

import android.database.Cursor;
import android.provider.ContactsContract;
import android.util.Base64;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.getcapacitor.JSArray;
import com.getcapacitor.JSObject;
import io.capawesome.capacitorjs.plugins.contacts.ContactsPlugin;
import io.capawesome.capacitorjs.plugins.contacts.enums.ContactField;
import io.capawesome.capacitorjs.plugins.contacts.enums.EmailAddressType;
import io.capawesome.capacitorjs.plugins.contacts.enums.PhoneNumberType;
import io.capawesome.capacitorjs.plugins.contacts.enums.PostalAddressType;
import io.capawesome.capacitorjs.plugins.contacts.enums.UrlAddressType;
import java.util.ArrayList;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Contact {

    @Nullable
    private Account account;

    @Nullable
    private Birthday birthday;

    @Nullable
    private ArrayList<EmailAddress> emailAddresses;

    @Nullable
    private String familyName;

    @Nullable
    private String givenName;

    @Nullable
    private String id;

    @Nullable
    private String jobTitle;

    @Nullable
    private String middleName;

    @Nullable
    private String namePrefix;

    @Nullable
    private String nameSuffix;

    @Nullable
    private String note;

    @Nullable
    private String organizationName;

    @Nullable
    private ArrayList<PhoneNumber> phoneNumbers;

    @Nullable
    private String photo;

    @Nullable
    private ArrayList<PostalAddress> postalAddresses;

    @Nullable
    private ArrayList<UrlAddress> urlAddresses;

    public Contact() {
        this.account = null;
        this.birthday = null;
        this.emailAddresses = null;
        this.familyName = null;
        this.givenName = null;
        this.id = null;
        this.jobTitle = null;
        this.middleName = null;
        this.namePrefix = null;
        this.nameSuffix = null;
        this.note = null;
        this.organizationName = null;
        this.phoneNumbers = null;
        this.photo = null;
        this.postalAddresses = null;
        this.urlAddresses = null;
    }

    public Contact(@NonNull JSObject data) throws Exception {
        this.account = getAccountFromJSObject(data);
        this.birthday = new Birthday(data);
        this.emailAddresses = getEmailAddressesFromJSObject(data);
        this.familyName = data.getString("familyName");
        this.givenName = data.getString("givenName");
        this.id = data.getString("id");
        this.jobTitle = data.getString("jobTitle");
        this.middleName = data.getString("middleName");
        this.namePrefix = data.getString("namePrefix");
        this.nameSuffix = data.getString("nameSuffix");
        this.note = data.getString("note");
        this.organizationName = data.getString("organizationName");
        this.phoneNumbers = getPhoneNumbersFromJSObject(data);
        this.photo = data.getString("photo");
        this.postalAddresses = getPostalAddressesFromJSObject(data);
        this.urlAddresses = getUrlAddressesFromJSObject(data);
    }

    @Nullable
    public Account getAccount() {
        return account;
    }

    @Nullable
    public Birthday getBirthday() {
        return birthday;
    }

    @Nullable
    public ArrayList<EmailAddress> getEmailAddresses() {
        return emailAddresses;
    }

    @Nullable
    public String getFamilyName() {
        return familyName;
    }

    @Nullable
    public String getGivenName() {
        return givenName;
    }

    @Nullable
    public String getJobTitle() {
        return jobTitle;
    }

    @Nullable
    public String getMiddleName() {
        return middleName;
    }

    @Nullable
    public String getNamePrefix() {
        return namePrefix;
    }

    @Nullable
    public String getNameSuffix() {
        return nameSuffix;
    }

    @Nullable
    public String getNote() {
        return note;
    }

    @Nullable
    public String getOrganizationName() {
        return organizationName;
    }

    @Nullable
    public ArrayList<PhoneNumber> getPhoneNumbers() {
        return phoneNumbers;
    }

    @Nullable
    public String getPhoto() {
        return photo;
    }

    @Nullable
    public ArrayList<PostalAddress> getPostalAddresses() {
        return postalAddresses;
    }

    @Nullable
    public ArrayList<UrlAddress> getUrlAddresses() {
        return urlAddresses;
    }

    public void setPropertiesFromCursor(@NonNull Cursor cursor, @NonNull List<ContactField> fields) {
        String mimeType = getStringByColumnName(cursor, ContactsContract.Data.MIMETYPE);
        if (mimeType == null) {
            return;
        }
        if (fields.contains(ContactField.ACCOUNT)) {
            String accountName = getStringByColumnName(cursor, ContactsContract.RawContacts.ACCOUNT_NAME);
            String accountType = getStringByColumnName(cursor, ContactsContract.RawContacts.ACCOUNT_TYPE);
            this.account = new Account(accountName, accountType);
        }
        switch (mimeType) {
            case ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE: {
                if (fields.contains(ContactField.FAMILY_NAME)) {
                    this.familyName = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME);
                }
                if (fields.contains(ContactField.GIVEN_NAME)) {
                    this.givenName = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME);
                }
                if (fields.contains(ContactField.ID)) {
                    this.id = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredName.CONTACT_ID);
                }
                if (fields.contains(ContactField.MIDDLE_NAME)) {
                    this.middleName = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME);
                }
                if (fields.contains(ContactField.NAME_PREFIX)) {
                    this.namePrefix = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredName.PREFIX);
                }
                if (fields.contains(ContactField.NAME_SUFFIX)) {
                    this.nameSuffix = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredName.SUFFIX);
                }
                break;
            }
            case ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE: {
                this.organizationName = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Organization.COMPANY);
                this.jobTitle = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Organization.TITLE);
                break;
            }
            case ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE: {
                this.note = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Note.NOTE);
                break;
            }
            case ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE: {
                this.photo = getBase64ByColumnName(cursor, ContactsContract.CommonDataKinds.Photo.PHOTO);
                break;
            }
            case ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE: {
                EmailAddressType type = EmailAddressType.fromInt(getIntByColumnName(cursor, ContactsContract.CommonDataKinds.Email.TYPE));
                String value = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Email.ADDRESS);
                if (type != null && value != null) {
                    Boolean isPrimary = getBooleanByColumnName(cursor, ContactsContract.CommonDataKinds.Email.IS_PRIMARY);
                    String label = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Email.LABEL);
                    EmailAddress emailAddress = new EmailAddress(isPrimary, label, type, value);
                    addEmailAddress(emailAddress);
                }
                break;
            }
            case ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE: {
                PhoneNumberType type = PhoneNumberType.fromInt(getIntByColumnName(cursor, ContactsContract.CommonDataKinds.Phone.TYPE));
                String value = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Phone.NUMBER);
                if (type != null && value != null) {
                    Boolean isPrimary = getBooleanByColumnName(cursor, ContactsContract.CommonDataKinds.Phone.IS_PRIMARY);
                    String label = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Phone.LABEL);
                    PhoneNumber phoneNumber = new PhoneNumber(isPrimary, label, type, value);
                    addPhoneNumber(phoneNumber);
                }
                break;
            }
            case ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE: {
                PostalAddressType type = PostalAddressType.fromInt(
                    getIntByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.TYPE)
                );
                if (type != null) {
                    PostalAddress postalAddress = new PostalAddress(type);
                    postalAddress.setCity(getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.CITY));
                    postalAddress.setCountry(getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY));
                    postalAddress.setFormatted(
                        getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS)
                    );
                    postalAddress.setIsPrimary(
                        getBooleanByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.IS_PRIMARY)
                    );
                    postalAddress.setLabel(getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.LABEL));
                    postalAddress.setNeighborhood(
                        getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.NEIGHBORHOOD)
                    );
                    postalAddress.setPostalCode(getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE));
                    postalAddress.setState(getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.REGION));
                    postalAddress.setStreet(getStringByColumnName(cursor, ContactsContract.CommonDataKinds.StructuredPostal.STREET));
                    addPostalAddress(postalAddress);
                }
                break;
            }
            case ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE: {
                String label = cursor.getString(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Website.LABEL));
                int type = cursor.getInt(cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Website.TYPE));
                String value = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Website.URL);

                if (value != null) {
                    // String label = getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Website.LABEL);
                    UrlAddress urlAddress = new UrlAddress(label, UrlAddressType.fromInt(type), value);
                    addUrlAddress(urlAddress);
                }
                break;
            }
            case ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE: {
                birthday = new Birthday(getStringByColumnName(cursor, ContactsContract.CommonDataKinds.Event.START_DATE));
                break;
            }
        }
    }

    @NonNull
    public JSObject toJSObject() {
        JSObject accountResult = null;
        if (account != null) {
            accountResult = new JSObject();
            accountResult.put("name", account.name);
            accountResult.put("type", account.type);
        }
        JSArray emailAddressesResult = null;
        if (this.emailAddresses != null) {
            emailAddressesResult = new JSArray();
            for (EmailAddress emailAddress : this.emailAddresses) {
                emailAddressesResult.put(emailAddress.toJSObject());
            }
        }
        JSArray phoneNumbersResult = null;
        if (this.phoneNumbers != null) {
            phoneNumbersResult = new JSArray();
            for (PhoneNumber phoneNumber : this.phoneNumbers) {
                phoneNumbersResult.put(phoneNumber.toJSObject());
            }
        }
        JSArray postalAddressesResult = null;
        if (this.postalAddresses != null) {
            postalAddressesResult = new JSArray();
            for (PostalAddress postalAddress : this.postalAddresses) {
                postalAddressesResult.put(postalAddress.toJSObject());
            }
        }
        JSArray urlAddressesResult = null;
        if (this.urlAddresses != null) {
            urlAddressesResult = new JSArray();
            for (UrlAddress urlAddress : this.urlAddresses) {
                urlAddressesResult.put(urlAddress.toJSObject());
            }
        }

        JSObject result = new JSObject();
        result.put("account", accountResult);
        result.put("birthday", this.birthday != null ? this.birthday.toJSObject() : null);
        result.put("emailAddresses", emailAddressesResult);
        result.put("familyName", this.familyName);
        result.put("givenName", this.givenName);
        result.put("id", this.id);
        result.put("jobTitle", this.jobTitle);
        result.put("middleName", this.middleName);
        result.put("namePrefix", this.namePrefix);
        result.put("nameSuffix", this.nameSuffix);
        result.put("note", this.note);
        result.put("organizationName", this.organizationName);
        result.put("phoneNumbers", phoneNumbersResult);
        result.put("photo", this.photo);
        result.put("postalAddresses", postalAddressesResult);
        result.put("urlAddresses", urlAddressesResult);
        return result;
    }

    private void addEmailAddress(@NonNull EmailAddress emailAddress) {
        if (this.emailAddresses == null) {
            this.emailAddresses = new ArrayList<>();
        }
        this.emailAddresses.add(emailAddress);
    }

    private void addPhoneNumber(@NonNull PhoneNumber phoneNumber) {
        if (this.phoneNumbers == null) {
            this.phoneNumbers = new ArrayList<>();
        }
        this.phoneNumbers.add(phoneNumber);
    }

    private void addPostalAddress(@NonNull PostalAddress postalAddress) {
        if (this.postalAddresses == null) {
            this.postalAddresses = new ArrayList<>();
        }
        this.postalAddresses.add(postalAddress);
    }

    private void addUrlAddress(@NonNull UrlAddress urlAddress) {
        if (this.urlAddresses == null) {
            this.urlAddresses = new ArrayList<>();
        }
        this.urlAddresses.add(urlAddress);
    }

    @Nullable
    private Account getAccountFromJSObject(@NonNull JSObject data) throws Exception {
        JSObject accountData = data.getJSObject("account");
        if (accountData == null) {
            return null;
        }
        return new Account(accountData);
    }

    @Nullable
    private ArrayList<EmailAddress> getEmailAddressesFromJSObject(@NonNull JSObject data) throws Exception {
        List<JSObject> valueAsList = new ArrayList<>();
        try {
            JSONArray valueAsJSONArray = data.getJSONArray("emailAddresses");
            for (int i = 0; i < valueAsJSONArray.length(); i++) {
                JSONObject value = valueAsJSONArray.getJSONObject(i);
                valueAsList.add(JSObject.fromJSONObject(value));
            }
        } catch (JSONException e) {
            return null;
        }
        ArrayList<EmailAddress> emailAddresses = new ArrayList<>();
        for (JSONObject value : valueAsList) {
            EmailAddress emailAddress = EmailAddress.fromJSONObject(value);
            emailAddresses.add(emailAddress);
        }
        return emailAddresses;
    }

    @Nullable
    private ArrayList<PhoneNumber> getPhoneNumbersFromJSObject(@NonNull JSObject data) throws Exception {
        List<JSObject> valueAsList = new ArrayList<>();
        try {
            JSONArray valueAsJSONArray = data.getJSONArray("phoneNumbers");
            for (int i = 0; i < valueAsJSONArray.length(); i++) {
                JSONObject value = valueAsJSONArray.getJSONObject(i);
                valueAsList.add(JSObject.fromJSONObject(value));
            }
        } catch (JSONException e) {
            return null;
        }
        ArrayList<PhoneNumber> phoneNumbers = new ArrayList<>();
        for (JSONObject value : valueAsList) {
            PhoneNumber phoneNumber = PhoneNumber.fromJSONObject(value);
            phoneNumbers.add(phoneNumber);
        }
        return phoneNumbers;
    }

    @Nullable
    private ArrayList<PostalAddress> getPostalAddressesFromJSObject(@NonNull JSObject data) throws Exception {
        List<JSObject> valueAsList = new ArrayList<>();
        try {
            JSONArray valueAsJSONArray = data.getJSONArray("postalAddresses");
            for (int i = 0; i < valueAsJSONArray.length(); i++) {
                JSONObject value = valueAsJSONArray.getJSONObject(i);
                valueAsList.add(JSObject.fromJSONObject(value));
            }
        } catch (JSONException e) {
            return null;
        }
        ArrayList<PostalAddress> postalAddresses = new ArrayList<>();
        for (JSONObject value : valueAsList) {
            PostalAddress postalAddress = PostalAddress.fromJSONObject(value);
            postalAddresses.add(postalAddress);
        }
        return postalAddresses;
    }

    @Nullable
    private String getBase64ByColumnName(Cursor cursor, String columnName) {
        int index = cursor.getColumnIndex(columnName);
        if (index >= 0) {
            byte[] blob = cursor.getBlob(index);
            if (blob != null) {
                return Base64.encodeToString(blob, Base64.NO_WRAP);
            }
        }
        return null;
    }

    @Nullable
    private Boolean getBooleanByColumnName(Cursor cursor, String columnName) {
        int index = cursor.getColumnIndex(columnName);
        if (index >= 0) {
            return cursor.getInt(index) == 1;
        }
        return null;
    }

    @Nullable
    private Integer getIntByColumnName(Cursor cursor, String columnName) {
        int index = cursor.getColumnIndex(columnName);
        if (index >= 0) {
            return cursor.getInt(index);
        }
        return null;
    }

    @Nullable
    private String getStringByColumnName(Cursor cursor, String columnName) {
        int index = cursor.getColumnIndex(columnName);
        if (index >= 0) {
            return cursor.getString(index);
        }
        return null;
    }

    @Nullable
    private ArrayList<UrlAddress> getUrlAddressesFromJSObject(@NonNull JSObject data) throws Exception {
        List<JSObject> valueAsList = new ArrayList<>();
        try {
            JSONArray valueAsJSONArray = data.getJSONArray("urlAddresses");
            for (int i = 0; i < valueAsJSONArray.length(); i++) {
                JSONObject value = valueAsJSONArray.getJSONObject(i);
                valueAsList.add(JSObject.fromJSONObject(value));
            }
        } catch (JSONException e) {
            return null;
        }
        ArrayList<UrlAddress> urlAddresses = new ArrayList<>();
        for (JSONObject value : valueAsList) {
            UrlAddress urlAddress = UrlAddress.fromJSONObject(value);
            urlAddresses.add(urlAddress);
        }
        return urlAddresses;
    }
}
