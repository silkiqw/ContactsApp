import Foundation
import Capacitor
import Contacts

@objc public class Contact: NSObject {
    var birthday: Birthday?
    var emailAddresses: [EmailAddress]?
    var familyName: String?
    var givenName: String?
    var groupIds: [String]?
    var id: String?
    var jobTitle: String?
    var middleName: String?
    var namePrefix: String?
    var nameSuffix: String?
    var note: String?
    var organizationName: String?
    var phoneNumbers: [PhoneNumber]?
    var photo: String?
    var postalAddresses: [PostalAddress]?
    var urlAddresses: [UrlAddress]?

    init(_ data: JSObject) throws {
        self.birthday = try Birthday(data)
        self.emailAddresses = try Contact.getEmailAddressesFromJSObject(data)
        self.familyName = data["familyName"] as? String
        self.givenName = data["givenName"] as? String
        self.groupIds = data["groupIds"] as? [String]
        self.id = data["id"] as? String
        self.jobTitle = data["jobTitle"] as? String
        self.middleName = data["middleName"] as? String
        self.namePrefix = data["namePrefix"] as? String
        self.nameSuffix = data["nameSuffix"] as? String
        self.note = data["note"] as? String
        self.organizationName = data["organizationName"] as? String
        self.phoneNumbers = try Contact.getPhoneNumbersFromJSObject(data)
        self.photo = data["photo"] as? String
        self.postalAddresses = try Contact.getPostalAddressesFromJSObject(data)
        self.urlAddresses = try Contact.getUrlAddressesFromJSObject(data)
    }

    init(_ contact: CNContact, includeId: Bool, id: String?, groupIds: [String]?) {
        if contact.isKeyAvailable(CNContactBirthdayKey) {
            self.birthday = contact.birthday == nil ? nil : Birthday(contact.birthday)
        }
        if contact.isKeyAvailable(CNContactEmailAddressesKey) {
            self.emailAddresses = contact.emailAddresses.isEmpty ? nil : contact.emailAddresses.map { EmailAddress($0) }
        }
        if contact.isKeyAvailable(CNContactFamilyNameKey) {
            self.familyName = contact.familyName.isEmpty ? nil : contact.familyName
        }
        if contact.isKeyAvailable(CNContactGivenNameKey) {
            self.givenName = contact.givenName.isEmpty ? nil : contact.givenName
        }
        self.groupIds = groupIds
        if includeId {
            if let id = id {
                self.id = id
            } else {
                self.id = contact.identifier
            }
        }
        if contact.isKeyAvailable(CNContactJobTitleKey) {
            self.jobTitle = contact.jobTitle.isEmpty ? nil : contact.jobTitle
        }
        if contact.isKeyAvailable(CNContactMiddleNameKey) {
            self.middleName = contact.middleName.isEmpty ? nil : contact.middleName
        }
        if contact.isKeyAvailable(CNContactNamePrefixKey) {
            self.namePrefix = contact.namePrefix.isEmpty ? nil : contact.namePrefix
        }
        if contact.isKeyAvailable(CNContactNameSuffixKey) {
            self.nameSuffix = contact.nameSuffix.isEmpty ? nil : contact.nameSuffix
        }
        if contact.isKeyAvailable(CNContactNoteKey) {
            self.note = contact.note.isEmpty ? nil : contact.note
        }
        if contact.isKeyAvailable(CNContactOrganizationNameKey) {
            self.organizationName = contact.organizationName.isEmpty ? nil : contact.organizationName
        }
        if contact.isKeyAvailable(CNContactPhoneNumbersKey) {
            self.phoneNumbers = contact.phoneNumbers.isEmpty ? nil : contact.phoneNumbers.map { PhoneNumber($0) }
        }
        if contact.isKeyAvailable(CNContactImageDataKey) {
            self.photo = contact.imageData?.base64EncodedString()
        }
        if contact.isKeyAvailable(CNContactPostalAddressesKey) {
            self.postalAddresses = contact.postalAddresses.isEmpty ? nil : contact.postalAddresses.map { PostalAddress($0) }
        }
        if contact.isKeyAvailable(CNContactUrlAddressesKey) {
            self.urlAddresses = contact.urlAddresses.isEmpty ? nil : contact.urlAddresses.map { UrlAddress($0) }
        }
    }

    private static func getEmailAddressesFromJSObject(_ data: JSObject) throws -> [EmailAddress]? {
        if let emailAddresses = data["emailAddresses"] as? [JSObject] {
            var result = [EmailAddress]()
            for emailAddress in emailAddresses {
                result.append(try EmailAddress(emailAddress))
            }
            return result
        }
        return nil
    }

    private static func getPhoneNumbersFromJSObject(_ data: JSObject) throws -> [PhoneNumber]? {
        if let phoneNumbers = data["phoneNumbers"] as? [JSObject] {
            var result = [PhoneNumber]()
            for phoneNumber in phoneNumbers {
                result.append(try PhoneNumber(phoneNumber))
            }
            return result
        }
        return nil
    }

    private static func getPostalAddressesFromJSObject(_ data: JSObject) throws -> [PostalAddress]? {
        if let postalAddresses = data["postalAddresses"] as? [JSObject] {
            var result = [PostalAddress]()
            for postalAddress in postalAddresses {
                result.append(try PostalAddress(postalAddress))
            }
            return result
        }
        return nil
    }

    private static func getUrlAddressesFromJSObject(_ data: JSObject) throws -> [UrlAddress]? {
        if let urlAddresses = data["urlAddresses"] as? [JSObject] {
            var result = [UrlAddress]()
            for urlAddress in urlAddresses {
                result.append(try UrlAddress(urlAddress))
            }
            return result
        }
        return nil
    }

    public func toJSObject() -> JSObject {
        var emailAddressesResult = JSArray()
        if let emailAddresses = self.emailAddresses {
            for emailAddress in emailAddresses {
                emailAddressesResult.append(emailAddress.toJSObject())
            }
        }
        var groupIdsResult = JSArray()
        if let groupIds = self.groupIds {
            for groupId in groupIds {
                groupIdsResult.append(groupId)
            }
        }
        var phoneNumbersResult = JSArray()
        if let phoneNumbers = self.phoneNumbers {
            for phoneNumber in phoneNumbers {
                phoneNumbersResult.append(phoneNumber.toJSObject())
            }
        }
        var postalAddressesResult = JSArray()
        if let postalAddresses = self.postalAddresses {
            for postalAddress in postalAddresses {
                postalAddressesResult.append(postalAddress.toJSObject())
            }
        }
        var urlAddressesResult = JSArray()
        if let urlAddresses = self.urlAddresses {
            for urlAddress in urlAddresses {
                urlAddressesResult.append(urlAddress.toJSObject())
            }
        }

        var result = JSObject()
        result["birthday"] = birthday == nil ? nil : birthday?.toJSObject()
        result["emailAddresses"] = emailAddressesResult.isEmpty ? nil : emailAddressesResult
        result["familyName"] = familyName
        result["givenName"] = givenName
        result["groupIds"] = groupIdsResult.isEmpty ? nil : groupIdsResult
        result["id"] = id
        result["jobTitle"] = jobTitle
        result["middleName"] = middleName
        result["namePrefix"] = namePrefix
        result["nameSuffix"] = nameSuffix
        result["note"] = note
        result["organizationName"] = organizationName
        result["phoneNumbers"] = phoneNumbersResult.isEmpty ? nil : phoneNumbersResult
        result["photo"] = photo
        result["postalAddresses"] = postalAddressesResult.isEmpty ? nil : postalAddressesResult
        result["urlAddresses"] = urlAddressesResult.isEmpty ? nil : urlAddressesResult
        return result
    }
}
