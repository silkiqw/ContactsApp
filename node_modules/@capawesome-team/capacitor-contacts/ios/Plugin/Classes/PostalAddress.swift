import Foundation
import Contacts
import Capacitor

@objc public class PostalAddress: NSObject {
    var city: String?
    var country: String?
    var formatted: String?
    var isoCountryCode: String?
    var isPrimary: Bool?
    var label: String?
    var neighborhood: String?
    var postalCode: String?
    var state: String?
    var street: String?
    var type: PostalAddressType

    init(city: String?, country: String?, formatted: String?, isoCountryCode: String?, isPrimary: Bool?, label: String?, neighborhood: String?, postalCode: String?, state: String?, street: String?, type: PostalAddressType) {
        self.city = city
        self.country = country
        self.formatted = formatted
        self.isPrimary = isPrimary
        self.label = label
        self.neighborhood = neighborhood
        self.postalCode = postalCode
        self.state = state
        self.street = street
        self.type = type
    }

    init(_ data: CNLabeledValue<CNPostalAddress>) {
        let formatted = CNPostalAddressFormatter.string(from: data.value, style: .mailingAddress)
        let type = PostalAddressType.fromLabel(data.label) ?? .other

        self.city = data.value.city.isEmpty ? nil : data.value.city
        self.country = data.value.country.isEmpty ? nil : data.value.country
        self.formatted = formatted.isEmpty ? nil : formatted
        self.label = type == .custom ? data.label : nil
        self.neighborhood = data.value.subAdministrativeArea.isEmpty ? nil : data.value.subAdministrativeArea
        self.postalCode = data.value.postalCode.isEmpty ? nil : data.value.postalCode
        self.state = data.value.state.isEmpty ? nil : data.value.state
        self.street = data.value.street.isEmpty ? nil : data.value.street
        self.type = type
    }

    init(_ data: JSObject) throws {
        if let city = data["city"] as? String {
            self.city = city
        }
        if let country = data["country"] as? String {
            self.country = country
        }
        if let formatted = data["formatted"] as? String {
            self.formatted = formatted
        }
        if let isoCountryCode = data["isoCountryCode"] as? String {
            self.isoCountryCode = isoCountryCode
        }
        if let isPrimary = data["isPrimary"] as? Bool {
            self.isPrimary = isPrimary
        }
        if let label = data["label"] as? String {
            self.label = label
        }
        if let neighborhood = data["neighborhood"] as? String {
            self.neighborhood = neighborhood
        }
        if let postalCode = data["postalCode"] as? String {
            self.postalCode = postalCode
        }
        if let state = data["state"] as? String {
            self.state = state
        }
        if let street = data["street"] as? String {
            self.street = street
        }
        if let type = data["type"] as? String {
            if let postalAddressType = PostalAddressType(rawValue: type) {
                self.type = postalAddressType
            } else {
                throw CustomError.typeInvalid
            }
        } else {
            self.type = .other
        }
    }

    private static func getValueFromJSObject(_ obj: JSObject) throws -> String {
        if let value = obj["value"] as? String {
            return value
        } else {
            throw CustomError.valueMissing
        }
    }

    public func toCNLabeledValue() -> CNLabeledValue<CNPostalAddress> {
        let address = CNMutablePostalAddress()
        address.city = city ?? ""
        address.country = country ?? ""
        address.isoCountryCode = isoCountryCode ?? ""
        address.street = street ?? ""
        address.subAdministrativeArea = neighborhood ?? ""
        address.state = state ?? ""
        address.postalCode = postalCode ?? ""
        address.street = street ?? ""
        return CNLabeledValue(
            label: type.toLabel() ?? label ?? "",
            value: address
        )
    }

    public func toJSObject() -> JSObject {
        var result = JSObject()
        result["city"] = city
        result["country"] = country
        result["formatted"] = formatted
        result["isPrimary"] = isPrimary
        result["label"] = label
        result["neighborhood"] = neighborhood
        result["postalCode"] = postalCode
        result["state"] = state
        result["street"] = street
        result["type"] = type.rawValue
        return result
    }
}
