import Capacitor

@objc public class Birthday: NSObject {
    private var value: DateComponents?

    init(_ data: DateComponents?) {
        self.value = data
    }

    init(_ data: JSObject) throws {
        if let birthday = data["birthday"] as? JSObject {
            var dateComponents = DateComponents()
            dateComponents.calendar = Calendar.current
            if let year = birthday["year"] as? Int {
                dateComponents.year = year
            }
            guard let month = birthday["month"] as? Int else {
                throw CustomError.birthdayMonthMissing
            }
            dateComponents.month = month
            guard let day = birthday["day"] as? Int else {
                throw CustomError.birthdayDayMissing
            }
            dateComponents.day = day
            self.value = dateComponents
        }
    }

    func toDateComponents() -> DateComponents? {
        return value
    }

    func toJSObject() -> JSObject? {
        if let birthday = value {
            var data = JSObject()

            if let year = birthday.year {
                data["year"] = year
            }
            if let month = birthday.month {
                data["month"] = month
            }
            if let day = birthday.day {
                data["day"] = day
            }
            return data
        } else {
            return nil
        }
    }
}
