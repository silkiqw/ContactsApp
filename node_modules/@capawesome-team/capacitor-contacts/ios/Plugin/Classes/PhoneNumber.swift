import Foundation
import Contacts
import Capacitor

@objc public class PhoneNumber: NSObject {
    var isPrimary: Bool?
    var label: String?
    var type: PhoneNumberType
    var value: String

    init(isPrimary: Bool?, label: String?, type: PhoneNumberType, value: String) {
        self.isPrimary = isPrimary
        self.label = label
        self.type = type
        self.value = value
    }

    init(_ data: CNLabeledValue<CNPhoneNumber>) {
        let type = PhoneNumberType.fromLabel(data.label) ?? .other

        self.label = type == .custom ? data.label : nil
        self.type = type
        self.value = data.value.stringValue
    }

    init(_ data: JSObject) throws {
        if let isPrimary = data["isPrimary"] as? Bool {
            self.isPrimary = isPrimary
        }
        if let label = data["label"] as? String {
            self.label = label
        }
        if let type = data["type"] as? String {
            if let phoneNumberType = PhoneNumberType(rawValue: type) {
                self.type = phoneNumberType
            } else {
                throw CustomError.typeInvalid
            }
        } else {
            self.type = .other
        }
        if let value = data["value"] as? String {
            self.value = value
        } else {
            throw CustomError.valueMissing
        }
    }

    public func toCNLabeledValue() -> CNLabeledValue<CNPhoneNumber> {
        return CNLabeledValue(
            label: type.toLabel() ?? label ?? "",
            value: CNPhoneNumber(stringValue: value)
        )
    }

    public func toJSObject() -> JSObject {
        var result = JSObject()
        result["isPrimary"] = isPrimary
        result["label"] = label
        result["type"] = type.rawValue
        result["value"] = value
        return result
    }
}
