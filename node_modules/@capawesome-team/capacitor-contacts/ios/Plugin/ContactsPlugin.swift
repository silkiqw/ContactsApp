import Foundation
import Contacts
import Capacitor

/**
 * Please read the Capacitor iOS Plugin Development Guide
 * here: https://capacitorjs.com/docs/plugins/ios
 */
@objc(ContactsPlugin)
public class ContactsPlugin: CAPPlugin, CAPBridgedPlugin {
    public let identifier = "ContactsPlugin" // DO NOT REMOVE THIS LINE
    public let jsName = "Contacts" // DO NOT REMOVE THIS LINE
    public let pluginMethods: [CAPPluginMethod] = [ // DO NOT REMOVE THIS LINE
        CAPPluginMethod(name: "countContacts", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "createContact", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "createGroup", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "deleteContactById", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "deleteGroupById", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "displayContactById", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "displayCreateContact", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "displayUpdateContactById", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "getAccounts", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "getContactById", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "getContacts", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "getGroupById", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "getGroups", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "isAvailable", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "isSupported", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "pickContact", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "pickContacts", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "updateContactById", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "checkPermissions", returnType: CAPPluginReturnPromise),
        CAPPluginMethod(name: "requestPermissions", returnType: CAPPluginReturnPromise)
    ]

    public static let permissionReadContacts = "readContacts"
    public static let permissionWriteContacts = "writeContacts"
    public static let tag = "ContactsPlugin"

    private var implementation: Contacts?

    override public func load() {
        self.implementation = Contacts(plugin: self)
    }

    @objc func countContacts(_ call: CAPPluginCall) {
        if !isContactsPermissionGranted() {
            requestPermission(call, ContactsPlugin.permissionReadContacts)
            return
        }

        implementation?.countContacts { result, error in
            if let error = error {
                self.rejectCall(call, error)
                return
            }
            self.resolveCall(call, result)
        }
    }

    @objc func createContact(_ call: CAPPluginCall) {
        do {
            if !isContactsPermissionGranted() {
                requestPermission(call, ContactsPlugin.permissionReadContacts)
                return
            }

            let options = try CreateContactOptions(call)

            try implementation?.createContact(options, completion: { result, error in
                if let error = error {
                    self.rejectCall(call, error)
                } else {
                    self.resolveCall(call, result)
                }
            })
        } catch {
            self.rejectCall(call, error)
        }
    }

    @objc func createGroup(_ call: CAPPluginCall) {
        do {
            let options = try CreateGroupOptions(call)
            try implementation?.createGroup(options) { result, error in
                if let error = error {
                    self.rejectCall(call, error)
                    return
                }
                self.resolveCall(call, result)
            }
        } catch let error {
            self.rejectCall(call, error)
        }
    }

    @objc func deleteContactById(_ call: CAPPluginCall) {
        do {
            if !isContactsPermissionGranted() {
                requestPermission(call, ContactsPlugin.permissionReadContacts)
                return
            }

            let options = try DeleteContactByIdOptions(call)

            implementation?.deleteContactById(options, completion: { error in
                if let error = error {
                    self.rejectCall(call, error)
                } else {
                    self.resolveCall(call)
                }
            })
        } catch {
            self.rejectCall(call, error)
        }
    }

    @objc func deleteGroupById(_ call: CAPPluginCall) {
        do {
            let options = try DeleteGroupByIdOptions(call)
            implementation?.deleteGroupById(options) { error in
                if let error = error {
                    self.rejectCall(call, error)
                    return
                }
                self.resolveCall(call)
            }
        } catch let error {
            self.rejectCall(call, error)
        }
    }

    @objc public func getAccounts(_ call: CAPPluginCall) {
        self.rejectCallAsUnimplemented(call)
    }

    @objc public func displayContactById(_ call: CAPPluginCall) {
        do {
            let options = try DisplayContactByIdOptions(call)
            try implementation?.displayContactById(options) { error in
                if let error = error {
                    self.rejectCall(call, error)
                    return
                }
                self.resolveCall(call)
            }
        } catch {
            rejectCall(call, error)
        }
    }

    @objc public func displayCreateContact(_ call: CAPPluginCall) {
        do {
            let options = try DisplayCreateContactOptions(call)

            implementation?.displayCreateContact(options, completion: { result, error in
                if let error = error {
                    self.rejectCall(call, error)
                    return
                }
                self.resolveCall(call, result)
            })
        } catch {
            self.rejectCall(call, error)
        }
    }

    @objc public func displayUpdateContactById(_ call: CAPPluginCall) {
        do {
            let options = try DisplayUpdateContactByIdOptions(call)

            implementation?.displayUpdateContactById(options) { error in
                if let error = error {
                    self.rejectCall(call, error)
                    return
                }
                self.resolveCall(call)
            }
        } catch {
            rejectCall(call, error)
        }
    }

    @objc func getContactById(_ call: CAPPluginCall) {
        do {
            if !isContactsPermissionGranted() {
                requestPermission(call, ContactsPlugin.permissionReadContacts)
                return
            }

            let options = try GetContactByIdOptions(call)

            implementation?.getContactById(options, completion: { result, error in
                if let error = error {
                    self.rejectCall(call, error)
                } else {
                    self.resolveCall(call, result)
                }
            })
        } catch {
            self.rejectCall(call, error)
        }
    }

    @objc func getContacts(_ call: CAPPluginCall) {
        if !isContactsPermissionGranted() {
            requestPermission(call, ContactsPlugin.permissionReadContacts)
            return
        }

        let options = GetContactsOptions(call)

        implementation?.getContacts(options, completion: { result, error in
            if let error = error {
                self.rejectCall(call, error)
            } else {
                self.resolveCall(call, result)
            }
        })
    }

    @objc func getGroupById(_ call: CAPPluginCall) {
        do {
            let options = try GetGroupByIdOptions(call)
            implementation?.getGroupById(options) { result, error in
                if let error = error {
                    self.rejectCall(call, error)
                    return
                }

                self.resolveCall(call, result)
            }
        } catch let error {
            rejectCall(call, error)
        }
    }

    @objc func getGroups(_ call: CAPPluginCall) {
        implementation?.getGroups { result, error in
            if let error = error {
                self.rejectCall(call, error)
                return
            }

            self.resolveCall(call, result)
        }
    }

    @objc func isAvailable(_ call: CAPPluginCall) {
        call.resolve(["isAvailable": true])
    }

    @objc func isSupported(_ call: CAPPluginCall) {
        call.resolve(["isSupported": true])
    }

    @objc func pickContact(_ call: CAPPluginCall) {
        pickContacts(call)
    }

    @objc func pickContacts(_ call: CAPPluginCall) {
        let options = PickContactsOptions(call)
        implementation?.pickContacts(options) { result, error in
            if let error = error {
                self.rejectCall(call, error)
                return
            }

            self.resolveCall(call, result)
        }
    }

    @objc func updateContactById(_ call: CAPPluginCall) {
        if !isContactsPermissionGranted() {
            requestPermission(call, ContactsPlugin.permissionReadContacts)
            return
        }

        do {
            let options = try UpdateContactByIdOptions(call)
            try implementation?.updateContactById(options) { error in
                if let error = error {
                    self.rejectCall(call, error)
                    return
                }
                self.resolveCall(call)
            }
        } catch let error {
            rejectCall(call, error)
        }
    }

    @objc override public func checkPermissions(_ call: CAPPluginCall) {
        var status: String?
        switch CNContactStore.authorizationStatus(for: .contacts) {
        case .notDetermined:
            status = "prompt"
        case .denied, .restricted:
            status = "denied"
        case .authorized:
            status = "granted"
        case .limited:
            status = "limited"
        @unknown default:
            status = "prompt"
        }
        var result = JSObject()
        result[ContactsPlugin.permissionReadContacts] = status
        result[ContactsPlugin.permissionWriteContacts] = status
        call.resolve(result)
    }

    @objc override public func requestPermissions(_ call: CAPPluginCall) {
        if !hasUsageDescription(forKey: "NSContactsUsageDescription") {
            rejectCall(call, CustomError.privacyDescriptionsMissing)
            return
        }

        var permissions = call.getArray("permissions", String.self) ?? []
        if permissions.isEmpty {
            permissions = [ContactsPlugin.permissionReadContacts, ContactsPlugin.permissionWriteContacts]
        }
        let group = DispatchGroup()
        if permissions.contains(ContactsPlugin.permissionReadContacts) || permissions.contains(ContactsPlugin.permissionWriteContacts) {
            if CNContactStore.authorizationStatus(for: .contacts) == .notDetermined {
                group.enter()
                CNContactStore().requestAccess(for: .contacts) { _, _  in
                    group.leave()
                }
            }
        }
        group.notify(queue: DispatchQueue.main) {
            self.checkPermissions(call)
        }
    }

    private func handleContactsPermissionCallback(_ call: CAPPluginCall) {
        if !isContactsPermissionGranted() {
            rejectCall(call, CustomError.readContactsPermissionDenied)
            return
        }

        switch call.methodName {
        case "countContacts":
            countContacts(call)
        case "createContact":
            createContact(call)
        case "deleteContactById":
            deleteContactById(call)
        case "getContactById":
            getContactById(call)
        case "getContacts":
            getContacts(call)
        case "updateContactById":
            updateContactById(call)
        default:
            break
        }
    }

    private func isContactsPermissionGranted() -> Bool {
        if #available(iOS 18.0, *) {
            return CNContactStore.authorizationStatus(for: .contacts) == .authorized || CNContactStore.authorizationStatus(for: .contacts) == .limited
        } else {
            return CNContactStore.authorizationStatus(for: .contacts) == .authorized
        }
    }

    private func requestPermission(_ call: CAPPluginCall, _ permission: String) {
        if !hasUsageDescription(forKey: "NSContactsUsageDescription") {
            rejectCall(call, CustomError.privacyDescriptionsMissing)
            return
        }

        switch permission {
        case ContactsPlugin.permissionReadContacts:
            requestContactsPermission(call)
        case ContactsPlugin.permissionWriteContacts:
            requestContactsPermission(call)
        default:
            break
        }
    }

    private func requestContactsPermission(_ call: CAPPluginCall) {
        CNContactStore().requestAccess(for: .contacts) { _, _  in
            self.handleContactsPermissionCallback(call)
        }
    }

    private func hasUsageDescription(forKey key: String) -> Bool {
        return Bundle.main.object(forInfoDictionaryKey: key) is String
    }

    private func rejectCall(_ call: CAPPluginCall, _ error: Error) {
        CAPLog.print("[", ContactsPlugin.tag, "] ", error)
        call.reject(error.localizedDescription)
    }

    private func rejectCallAsUnimplemented(_ call: CAPPluginCall) {
        call.unimplemented("Not implemented on this platform.")
    }

    private func resolveCall(_ call: CAPPluginCall) {
        call.resolve()
    }

    private func resolveCall(_ call: CAPPluginCall, _ result: Result?) {
        if let result = result?.toJSObject() as? JSObject {
            call.resolve(result)
        } else {
            call.resolve()
        }
    }
}
